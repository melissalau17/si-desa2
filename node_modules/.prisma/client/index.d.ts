
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Keuangan
 * 
 */
export type Keuangan = $Result.DefaultSelection<Prisma.$KeuanganPayload>
/**
 * Model Berita
 * 
 */
export type Berita = $Result.DefaultSelection<Prisma.$BeritaPayload>
/**
 * Model Laporan
 * 
 */
export type Laporan = $Result.DefaultSelection<Prisma.$LaporanPayload>
/**
 * Model Surat
 * 
 */
export type Surat = $Result.DefaultSelection<Prisma.$SuratPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.keuangan`: Exposes CRUD operations for the **Keuangan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keuangans
    * const keuangans = await prisma.keuangan.findMany()
    * ```
    */
  get keuangan(): Prisma.KeuanganDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.berita`: Exposes CRUD operations for the **Berita** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Beritas
    * const beritas = await prisma.berita.findMany()
    * ```
    */
  get berita(): Prisma.BeritaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.laporan`: Exposes CRUD operations for the **Laporan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Laporans
    * const laporans = await prisma.laporan.findMany()
    * ```
    */
  get laporan(): Prisma.LaporanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.surat`: Exposes CRUD operations for the **Surat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Surats
    * const surats = await prisma.surat.findMany()
    * ```
    */
  get surat(): Prisma.SuratDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Keuangan: 'Keuangan',
    Berita: 'Berita',
    Laporan: 'Laporan',
    Surat: 'Surat'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "keuangan" | "berita" | "laporan" | "surat"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Keuangan: {
        payload: Prisma.$KeuanganPayload<ExtArgs>
        fields: Prisma.KeuanganFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeuanganFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeuanganPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeuanganFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeuanganPayload>
          }
          findFirst: {
            args: Prisma.KeuanganFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeuanganPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeuanganFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeuanganPayload>
          }
          findMany: {
            args: Prisma.KeuanganFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeuanganPayload>[]
          }
          create: {
            args: Prisma.KeuanganCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeuanganPayload>
          }
          createMany: {
            args: Prisma.KeuanganCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.KeuanganDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeuanganPayload>
          }
          update: {
            args: Prisma.KeuanganUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeuanganPayload>
          }
          deleteMany: {
            args: Prisma.KeuanganDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KeuanganUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KeuanganUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeuanganPayload>
          }
          aggregate: {
            args: Prisma.KeuanganAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKeuangan>
          }
          groupBy: {
            args: Prisma.KeuanganGroupByArgs<ExtArgs>
            result: $Utils.Optional<KeuanganGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeuanganCountArgs<ExtArgs>
            result: $Utils.Optional<KeuanganCountAggregateOutputType> | number
          }
        }
      }
      Berita: {
        payload: Prisma.$BeritaPayload<ExtArgs>
        fields: Prisma.BeritaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BeritaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeritaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BeritaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeritaPayload>
          }
          findFirst: {
            args: Prisma.BeritaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeritaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BeritaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeritaPayload>
          }
          findMany: {
            args: Prisma.BeritaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeritaPayload>[]
          }
          create: {
            args: Prisma.BeritaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeritaPayload>
          }
          createMany: {
            args: Prisma.BeritaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BeritaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeritaPayload>
          }
          update: {
            args: Prisma.BeritaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeritaPayload>
          }
          deleteMany: {
            args: Prisma.BeritaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BeritaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BeritaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeritaPayload>
          }
          aggregate: {
            args: Prisma.BeritaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBerita>
          }
          groupBy: {
            args: Prisma.BeritaGroupByArgs<ExtArgs>
            result: $Utils.Optional<BeritaGroupByOutputType>[]
          }
          count: {
            args: Prisma.BeritaCountArgs<ExtArgs>
            result: $Utils.Optional<BeritaCountAggregateOutputType> | number
          }
        }
      }
      Laporan: {
        payload: Prisma.$LaporanPayload<ExtArgs>
        fields: Prisma.LaporanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LaporanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaporanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LaporanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaporanPayload>
          }
          findFirst: {
            args: Prisma.LaporanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaporanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LaporanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaporanPayload>
          }
          findMany: {
            args: Prisma.LaporanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaporanPayload>[]
          }
          create: {
            args: Prisma.LaporanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaporanPayload>
          }
          createMany: {
            args: Prisma.LaporanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LaporanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaporanPayload>
          }
          update: {
            args: Prisma.LaporanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaporanPayload>
          }
          deleteMany: {
            args: Prisma.LaporanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LaporanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LaporanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaporanPayload>
          }
          aggregate: {
            args: Prisma.LaporanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLaporan>
          }
          groupBy: {
            args: Prisma.LaporanGroupByArgs<ExtArgs>
            result: $Utils.Optional<LaporanGroupByOutputType>[]
          }
          count: {
            args: Prisma.LaporanCountArgs<ExtArgs>
            result: $Utils.Optional<LaporanCountAggregateOutputType> | number
          }
        }
      }
      Surat: {
        payload: Prisma.$SuratPayload<ExtArgs>
        fields: Prisma.SuratFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SuratFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuratPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuratFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuratPayload>
          }
          findFirst: {
            args: Prisma.SuratFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuratPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuratFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuratPayload>
          }
          findMany: {
            args: Prisma.SuratFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuratPayload>[]
          }
          create: {
            args: Prisma.SuratCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuratPayload>
          }
          createMany: {
            args: Prisma.SuratCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SuratDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuratPayload>
          }
          update: {
            args: Prisma.SuratUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuratPayload>
          }
          deleteMany: {
            args: Prisma.SuratDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SuratUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SuratUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuratPayload>
          }
          aggregate: {
            args: Prisma.SuratAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurat>
          }
          groupBy: {
            args: Prisma.SuratGroupByArgs<ExtArgs>
            result: $Utils.Optional<SuratGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuratCountArgs<ExtArgs>
            result: $Utils.Optional<SuratCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    keuangan?: KeuanganOmit
    berita?: BeritaOmit
    laporan?: LaporanOmit
    surat?: SuratOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    NIK: string | null
    nama: string | null
    no_hp: string | null
    jenis_kel: string | null
    alamat: string | null
    agama: string | null
    username: string | null
    password: string | null
    photo: Uint8Array | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    NIK: string | null
    nama: string | null
    no_hp: string | null
    jenis_kel: string | null
    alamat: string | null
    agama: string | null
    username: string | null
    password: string | null
    photo: Uint8Array | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    NIK: number
    nama: number
    no_hp: number
    jenis_kel: number
    alamat: number
    agama: number
    username: number
    password: number
    photo: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    NIK?: true
    nama?: true
    no_hp?: true
    jenis_kel?: true
    alamat?: true
    agama?: true
    username?: true
    password?: true
    photo?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    NIK?: true
    nama?: true
    no_hp?: true
    jenis_kel?: true
    alamat?: true
    agama?: true
    username?: true
    password?: true
    photo?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    NIK?: true
    nama?: true
    no_hp?: true
    jenis_kel?: true
    alamat?: true
    agama?: true
    username?: true
    password?: true
    photo?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: number
    NIK: string
    nama: string
    no_hp: string
    jenis_kel: string
    alamat: string
    agama: string
    username: string
    password: string
    photo: Uint8Array | null
    role: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    NIK?: boolean
    nama?: boolean
    no_hp?: boolean
    jenis_kel?: boolean
    alamat?: boolean
    agama?: boolean
    username?: boolean
    password?: boolean
    photo?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    user_id?: boolean
    NIK?: boolean
    nama?: boolean
    no_hp?: boolean
    jenis_kel?: boolean
    alamat?: boolean
    agama?: boolean
    username?: boolean
    password?: boolean
    photo?: boolean
    role?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_id" | "NIK" | "nama" | "no_hp" | "jenis_kel" | "alamat" | "agama" | "username" | "password" | "photo" | "role", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      NIK: string
      nama: string
      no_hp: string
      jenis_kel: string
      alamat: string
      agama: string
      username: string
      password: string
      photo: Uint8Array | null
      role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'Int'>
    readonly NIK: FieldRef<"User", 'String'>
    readonly nama: FieldRef<"User", 'String'>
    readonly no_hp: FieldRef<"User", 'String'>
    readonly jenis_kel: FieldRef<"User", 'String'>
    readonly alamat: FieldRef<"User", 'String'>
    readonly agama: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly photo: FieldRef<"User", 'Bytes'>
    readonly role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model Keuangan
   */

  export type AggregateKeuangan = {
    _count: KeuanganCountAggregateOutputType | null
    _avg: KeuanganAvgAggregateOutputType | null
    _sum: KeuanganSumAggregateOutputType | null
    _min: KeuanganMinAggregateOutputType | null
    _max: KeuanganMaxAggregateOutputType | null
  }

  export type KeuanganAvgAggregateOutputType = {
    keuangan_id: number | null
    jumlah: Decimal | null
  }

  export type KeuanganSumAggregateOutputType = {
    keuangan_id: number | null
    jumlah: Decimal | null
  }

  export type KeuanganMinAggregateOutputType = {
    keuangan_id: number | null
    jenisTransaksi: string | null
    keterangan: string | null
    kategori: string | null
    tanggal: Date | null
    jumlah: Decimal | null
    catatan: string | null
  }

  export type KeuanganMaxAggregateOutputType = {
    keuangan_id: number | null
    jenisTransaksi: string | null
    keterangan: string | null
    kategori: string | null
    tanggal: Date | null
    jumlah: Decimal | null
    catatan: string | null
  }

  export type KeuanganCountAggregateOutputType = {
    keuangan_id: number
    jenisTransaksi: number
    keterangan: number
    kategori: number
    tanggal: number
    jumlah: number
    catatan: number
    _all: number
  }


  export type KeuanganAvgAggregateInputType = {
    keuangan_id?: true
    jumlah?: true
  }

  export type KeuanganSumAggregateInputType = {
    keuangan_id?: true
    jumlah?: true
  }

  export type KeuanganMinAggregateInputType = {
    keuangan_id?: true
    jenisTransaksi?: true
    keterangan?: true
    kategori?: true
    tanggal?: true
    jumlah?: true
    catatan?: true
  }

  export type KeuanganMaxAggregateInputType = {
    keuangan_id?: true
    jenisTransaksi?: true
    keterangan?: true
    kategori?: true
    tanggal?: true
    jumlah?: true
    catatan?: true
  }

  export type KeuanganCountAggregateInputType = {
    keuangan_id?: true
    jenisTransaksi?: true
    keterangan?: true
    kategori?: true
    tanggal?: true
    jumlah?: true
    catatan?: true
    _all?: true
  }

  export type KeuanganAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keuangan to aggregate.
     */
    where?: KeuanganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keuangans to fetch.
     */
    orderBy?: KeuanganOrderByWithRelationInput | KeuanganOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeuanganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keuangans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keuangans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keuangans
    **/
    _count?: true | KeuanganCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeuanganAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeuanganSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeuanganMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeuanganMaxAggregateInputType
  }

  export type GetKeuanganAggregateType<T extends KeuanganAggregateArgs> = {
        [P in keyof T & keyof AggregateKeuangan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeuangan[P]>
      : GetScalarType<T[P], AggregateKeuangan[P]>
  }




  export type KeuanganGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeuanganWhereInput
    orderBy?: KeuanganOrderByWithAggregationInput | KeuanganOrderByWithAggregationInput[]
    by: KeuanganScalarFieldEnum[] | KeuanganScalarFieldEnum
    having?: KeuanganScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeuanganCountAggregateInputType | true
    _avg?: KeuanganAvgAggregateInputType
    _sum?: KeuanganSumAggregateInputType
    _min?: KeuanganMinAggregateInputType
    _max?: KeuanganMaxAggregateInputType
  }

  export type KeuanganGroupByOutputType = {
    keuangan_id: number
    jenisTransaksi: string
    keterangan: string
    kategori: string
    tanggal: Date
    jumlah: Decimal
    catatan: string
    _count: KeuanganCountAggregateOutputType | null
    _avg: KeuanganAvgAggregateOutputType | null
    _sum: KeuanganSumAggregateOutputType | null
    _min: KeuanganMinAggregateOutputType | null
    _max: KeuanganMaxAggregateOutputType | null
  }

  type GetKeuanganGroupByPayload<T extends KeuanganGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeuanganGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeuanganGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeuanganGroupByOutputType[P]>
            : GetScalarType<T[P], KeuanganGroupByOutputType[P]>
        }
      >
    >


  export type KeuanganSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    keuangan_id?: boolean
    jenisTransaksi?: boolean
    keterangan?: boolean
    kategori?: boolean
    tanggal?: boolean
    jumlah?: boolean
    catatan?: boolean
  }, ExtArgs["result"]["keuangan"]>



  export type KeuanganSelectScalar = {
    keuangan_id?: boolean
    jenisTransaksi?: boolean
    keterangan?: boolean
    kategori?: boolean
    tanggal?: boolean
    jumlah?: boolean
    catatan?: boolean
  }

  export type KeuanganOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"keuangan_id" | "jenisTransaksi" | "keterangan" | "kategori" | "tanggal" | "jumlah" | "catatan", ExtArgs["result"]["keuangan"]>

  export type $KeuanganPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Keuangan"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      keuangan_id: number
      jenisTransaksi: string
      keterangan: string
      kategori: string
      tanggal: Date
      jumlah: Prisma.Decimal
      catatan: string
    }, ExtArgs["result"]["keuangan"]>
    composites: {}
  }

  type KeuanganGetPayload<S extends boolean | null | undefined | KeuanganDefaultArgs> = $Result.GetResult<Prisma.$KeuanganPayload, S>

  type KeuanganCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KeuanganFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KeuanganCountAggregateInputType | true
    }

  export interface KeuanganDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Keuangan'], meta: { name: 'Keuangan' } }
    /**
     * Find zero or one Keuangan that matches the filter.
     * @param {KeuanganFindUniqueArgs} args - Arguments to find a Keuangan
     * @example
     * // Get one Keuangan
     * const keuangan = await prisma.keuangan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KeuanganFindUniqueArgs>(args: SelectSubset<T, KeuanganFindUniqueArgs<ExtArgs>>): Prisma__KeuanganClient<$Result.GetResult<Prisma.$KeuanganPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Keuangan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KeuanganFindUniqueOrThrowArgs} args - Arguments to find a Keuangan
     * @example
     * // Get one Keuangan
     * const keuangan = await prisma.keuangan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KeuanganFindUniqueOrThrowArgs>(args: SelectSubset<T, KeuanganFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KeuanganClient<$Result.GetResult<Prisma.$KeuanganPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Keuangan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeuanganFindFirstArgs} args - Arguments to find a Keuangan
     * @example
     * // Get one Keuangan
     * const keuangan = await prisma.keuangan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KeuanganFindFirstArgs>(args?: SelectSubset<T, KeuanganFindFirstArgs<ExtArgs>>): Prisma__KeuanganClient<$Result.GetResult<Prisma.$KeuanganPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Keuangan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeuanganFindFirstOrThrowArgs} args - Arguments to find a Keuangan
     * @example
     * // Get one Keuangan
     * const keuangan = await prisma.keuangan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KeuanganFindFirstOrThrowArgs>(args?: SelectSubset<T, KeuanganFindFirstOrThrowArgs<ExtArgs>>): Prisma__KeuanganClient<$Result.GetResult<Prisma.$KeuanganPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Keuangans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeuanganFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keuangans
     * const keuangans = await prisma.keuangan.findMany()
     * 
     * // Get first 10 Keuangans
     * const keuangans = await prisma.keuangan.findMany({ take: 10 })
     * 
     * // Only select the `keuangan_id`
     * const keuanganWithKeuangan_idOnly = await prisma.keuangan.findMany({ select: { keuangan_id: true } })
     * 
     */
    findMany<T extends KeuanganFindManyArgs>(args?: SelectSubset<T, KeuanganFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeuanganPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Keuangan.
     * @param {KeuanganCreateArgs} args - Arguments to create a Keuangan.
     * @example
     * // Create one Keuangan
     * const Keuangan = await prisma.keuangan.create({
     *   data: {
     *     // ... data to create a Keuangan
     *   }
     * })
     * 
     */
    create<T extends KeuanganCreateArgs>(args: SelectSubset<T, KeuanganCreateArgs<ExtArgs>>): Prisma__KeuanganClient<$Result.GetResult<Prisma.$KeuanganPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Keuangans.
     * @param {KeuanganCreateManyArgs} args - Arguments to create many Keuangans.
     * @example
     * // Create many Keuangans
     * const keuangan = await prisma.keuangan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KeuanganCreateManyArgs>(args?: SelectSubset<T, KeuanganCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Keuangan.
     * @param {KeuanganDeleteArgs} args - Arguments to delete one Keuangan.
     * @example
     * // Delete one Keuangan
     * const Keuangan = await prisma.keuangan.delete({
     *   where: {
     *     // ... filter to delete one Keuangan
     *   }
     * })
     * 
     */
    delete<T extends KeuanganDeleteArgs>(args: SelectSubset<T, KeuanganDeleteArgs<ExtArgs>>): Prisma__KeuanganClient<$Result.GetResult<Prisma.$KeuanganPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Keuangan.
     * @param {KeuanganUpdateArgs} args - Arguments to update one Keuangan.
     * @example
     * // Update one Keuangan
     * const keuangan = await prisma.keuangan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KeuanganUpdateArgs>(args: SelectSubset<T, KeuanganUpdateArgs<ExtArgs>>): Prisma__KeuanganClient<$Result.GetResult<Prisma.$KeuanganPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Keuangans.
     * @param {KeuanganDeleteManyArgs} args - Arguments to filter Keuangans to delete.
     * @example
     * // Delete a few Keuangans
     * const { count } = await prisma.keuangan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KeuanganDeleteManyArgs>(args?: SelectSubset<T, KeuanganDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keuangans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeuanganUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keuangans
     * const keuangan = await prisma.keuangan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KeuanganUpdateManyArgs>(args: SelectSubset<T, KeuanganUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Keuangan.
     * @param {KeuanganUpsertArgs} args - Arguments to update or create a Keuangan.
     * @example
     * // Update or create a Keuangan
     * const keuangan = await prisma.keuangan.upsert({
     *   create: {
     *     // ... data to create a Keuangan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Keuangan we want to update
     *   }
     * })
     */
    upsert<T extends KeuanganUpsertArgs>(args: SelectSubset<T, KeuanganUpsertArgs<ExtArgs>>): Prisma__KeuanganClient<$Result.GetResult<Prisma.$KeuanganPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Keuangans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeuanganCountArgs} args - Arguments to filter Keuangans to count.
     * @example
     * // Count the number of Keuangans
     * const count = await prisma.keuangan.count({
     *   where: {
     *     // ... the filter for the Keuangans we want to count
     *   }
     * })
    **/
    count<T extends KeuanganCountArgs>(
      args?: Subset<T, KeuanganCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeuanganCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Keuangan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeuanganAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeuanganAggregateArgs>(args: Subset<T, KeuanganAggregateArgs>): Prisma.PrismaPromise<GetKeuanganAggregateType<T>>

    /**
     * Group by Keuangan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeuanganGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeuanganGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeuanganGroupByArgs['orderBy'] }
        : { orderBy?: KeuanganGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeuanganGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeuanganGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Keuangan model
   */
  readonly fields: KeuanganFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Keuangan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeuanganClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Keuangan model
   */
  interface KeuanganFieldRefs {
    readonly keuangan_id: FieldRef<"Keuangan", 'Int'>
    readonly jenisTransaksi: FieldRef<"Keuangan", 'String'>
    readonly keterangan: FieldRef<"Keuangan", 'String'>
    readonly kategori: FieldRef<"Keuangan", 'String'>
    readonly tanggal: FieldRef<"Keuangan", 'DateTime'>
    readonly jumlah: FieldRef<"Keuangan", 'Decimal'>
    readonly catatan: FieldRef<"Keuangan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Keuangan findUnique
   */
  export type KeuanganFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keuangan
     */
    select?: KeuanganSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keuangan
     */
    omit?: KeuanganOmit<ExtArgs> | null
    /**
     * Filter, which Keuangan to fetch.
     */
    where: KeuanganWhereUniqueInput
  }

  /**
   * Keuangan findUniqueOrThrow
   */
  export type KeuanganFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keuangan
     */
    select?: KeuanganSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keuangan
     */
    omit?: KeuanganOmit<ExtArgs> | null
    /**
     * Filter, which Keuangan to fetch.
     */
    where: KeuanganWhereUniqueInput
  }

  /**
   * Keuangan findFirst
   */
  export type KeuanganFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keuangan
     */
    select?: KeuanganSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keuangan
     */
    omit?: KeuanganOmit<ExtArgs> | null
    /**
     * Filter, which Keuangan to fetch.
     */
    where?: KeuanganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keuangans to fetch.
     */
    orderBy?: KeuanganOrderByWithRelationInput | KeuanganOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keuangans.
     */
    cursor?: KeuanganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keuangans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keuangans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keuangans.
     */
    distinct?: KeuanganScalarFieldEnum | KeuanganScalarFieldEnum[]
  }

  /**
   * Keuangan findFirstOrThrow
   */
  export type KeuanganFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keuangan
     */
    select?: KeuanganSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keuangan
     */
    omit?: KeuanganOmit<ExtArgs> | null
    /**
     * Filter, which Keuangan to fetch.
     */
    where?: KeuanganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keuangans to fetch.
     */
    orderBy?: KeuanganOrderByWithRelationInput | KeuanganOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keuangans.
     */
    cursor?: KeuanganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keuangans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keuangans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keuangans.
     */
    distinct?: KeuanganScalarFieldEnum | KeuanganScalarFieldEnum[]
  }

  /**
   * Keuangan findMany
   */
  export type KeuanganFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keuangan
     */
    select?: KeuanganSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keuangan
     */
    omit?: KeuanganOmit<ExtArgs> | null
    /**
     * Filter, which Keuangans to fetch.
     */
    where?: KeuanganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keuangans to fetch.
     */
    orderBy?: KeuanganOrderByWithRelationInput | KeuanganOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keuangans.
     */
    cursor?: KeuanganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keuangans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keuangans.
     */
    skip?: number
    distinct?: KeuanganScalarFieldEnum | KeuanganScalarFieldEnum[]
  }

  /**
   * Keuangan create
   */
  export type KeuanganCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keuangan
     */
    select?: KeuanganSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keuangan
     */
    omit?: KeuanganOmit<ExtArgs> | null
    /**
     * The data needed to create a Keuangan.
     */
    data: XOR<KeuanganCreateInput, KeuanganUncheckedCreateInput>
  }

  /**
   * Keuangan createMany
   */
  export type KeuanganCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Keuangans.
     */
    data: KeuanganCreateManyInput | KeuanganCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Keuangan update
   */
  export type KeuanganUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keuangan
     */
    select?: KeuanganSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keuangan
     */
    omit?: KeuanganOmit<ExtArgs> | null
    /**
     * The data needed to update a Keuangan.
     */
    data: XOR<KeuanganUpdateInput, KeuanganUncheckedUpdateInput>
    /**
     * Choose, which Keuangan to update.
     */
    where: KeuanganWhereUniqueInput
  }

  /**
   * Keuangan updateMany
   */
  export type KeuanganUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Keuangans.
     */
    data: XOR<KeuanganUpdateManyMutationInput, KeuanganUncheckedUpdateManyInput>
    /**
     * Filter which Keuangans to update
     */
    where?: KeuanganWhereInput
    /**
     * Limit how many Keuangans to update.
     */
    limit?: number
  }

  /**
   * Keuangan upsert
   */
  export type KeuanganUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keuangan
     */
    select?: KeuanganSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keuangan
     */
    omit?: KeuanganOmit<ExtArgs> | null
    /**
     * The filter to search for the Keuangan to update in case it exists.
     */
    where: KeuanganWhereUniqueInput
    /**
     * In case the Keuangan found by the `where` argument doesn't exist, create a new Keuangan with this data.
     */
    create: XOR<KeuanganCreateInput, KeuanganUncheckedCreateInput>
    /**
     * In case the Keuangan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeuanganUpdateInput, KeuanganUncheckedUpdateInput>
  }

  /**
   * Keuangan delete
   */
  export type KeuanganDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keuangan
     */
    select?: KeuanganSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keuangan
     */
    omit?: KeuanganOmit<ExtArgs> | null
    /**
     * Filter which Keuangan to delete.
     */
    where: KeuanganWhereUniqueInput
  }

  /**
   * Keuangan deleteMany
   */
  export type KeuanganDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keuangans to delete
     */
    where?: KeuanganWhereInput
    /**
     * Limit how many Keuangans to delete.
     */
    limit?: number
  }

  /**
   * Keuangan without action
   */
  export type KeuanganDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keuangan
     */
    select?: KeuanganSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keuangan
     */
    omit?: KeuanganOmit<ExtArgs> | null
  }


  /**
   * Model Berita
   */

  export type AggregateBerita = {
    _count: BeritaCountAggregateOutputType | null
    _avg: BeritaAvgAggregateOutputType | null
    _sum: BeritaSumAggregateOutputType | null
    _min: BeritaMinAggregateOutputType | null
    _max: BeritaMaxAggregateOutputType | null
  }

  export type BeritaAvgAggregateOutputType = {
    berita_id: number | null
  }

  export type BeritaSumAggregateOutputType = {
    berita_id: number | null
  }

  export type BeritaMinAggregateOutputType = {
    berita_id: number | null
    judul: string | null
    kategori: string | null
    photo: Uint8Array | null
    tanggal: string | null
    kontent: string | null
    status: string | null
  }

  export type BeritaMaxAggregateOutputType = {
    berita_id: number | null
    judul: string | null
    kategori: string | null
    photo: Uint8Array | null
    tanggal: string | null
    kontent: string | null
    status: string | null
  }

  export type BeritaCountAggregateOutputType = {
    berita_id: number
    judul: number
    kategori: number
    photo: number
    tanggal: number
    kontent: number
    status: number
    _all: number
  }


  export type BeritaAvgAggregateInputType = {
    berita_id?: true
  }

  export type BeritaSumAggregateInputType = {
    berita_id?: true
  }

  export type BeritaMinAggregateInputType = {
    berita_id?: true
    judul?: true
    kategori?: true
    photo?: true
    tanggal?: true
    kontent?: true
    status?: true
  }

  export type BeritaMaxAggregateInputType = {
    berita_id?: true
    judul?: true
    kategori?: true
    photo?: true
    tanggal?: true
    kontent?: true
    status?: true
  }

  export type BeritaCountAggregateInputType = {
    berita_id?: true
    judul?: true
    kategori?: true
    photo?: true
    tanggal?: true
    kontent?: true
    status?: true
    _all?: true
  }

  export type BeritaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Berita to aggregate.
     */
    where?: BeritaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beritas to fetch.
     */
    orderBy?: BeritaOrderByWithRelationInput | BeritaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BeritaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beritas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beritas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Beritas
    **/
    _count?: true | BeritaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BeritaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BeritaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BeritaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BeritaMaxAggregateInputType
  }

  export type GetBeritaAggregateType<T extends BeritaAggregateArgs> = {
        [P in keyof T & keyof AggregateBerita]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBerita[P]>
      : GetScalarType<T[P], AggregateBerita[P]>
  }




  export type BeritaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BeritaWhereInput
    orderBy?: BeritaOrderByWithAggregationInput | BeritaOrderByWithAggregationInput[]
    by: BeritaScalarFieldEnum[] | BeritaScalarFieldEnum
    having?: BeritaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BeritaCountAggregateInputType | true
    _avg?: BeritaAvgAggregateInputType
    _sum?: BeritaSumAggregateInputType
    _min?: BeritaMinAggregateInputType
    _max?: BeritaMaxAggregateInputType
  }

  export type BeritaGroupByOutputType = {
    berita_id: number
    judul: string
    kategori: string
    photo: Uint8Array | null
    tanggal: string | null
    kontent: string
    status: string
    _count: BeritaCountAggregateOutputType | null
    _avg: BeritaAvgAggregateOutputType | null
    _sum: BeritaSumAggregateOutputType | null
    _min: BeritaMinAggregateOutputType | null
    _max: BeritaMaxAggregateOutputType | null
  }

  type GetBeritaGroupByPayload<T extends BeritaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BeritaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BeritaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BeritaGroupByOutputType[P]>
            : GetScalarType<T[P], BeritaGroupByOutputType[P]>
        }
      >
    >


  export type BeritaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    berita_id?: boolean
    judul?: boolean
    kategori?: boolean
    photo?: boolean
    tanggal?: boolean
    kontent?: boolean
    status?: boolean
  }, ExtArgs["result"]["berita"]>



  export type BeritaSelectScalar = {
    berita_id?: boolean
    judul?: boolean
    kategori?: boolean
    photo?: boolean
    tanggal?: boolean
    kontent?: boolean
    status?: boolean
  }

  export type BeritaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"berita_id" | "judul" | "kategori" | "photo" | "tanggal" | "kontent" | "status", ExtArgs["result"]["berita"]>

  export type $BeritaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Berita"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      berita_id: number
      judul: string
      kategori: string
      photo: Uint8Array | null
      tanggal: string | null
      kontent: string
      status: string
    }, ExtArgs["result"]["berita"]>
    composites: {}
  }

  type BeritaGetPayload<S extends boolean | null | undefined | BeritaDefaultArgs> = $Result.GetResult<Prisma.$BeritaPayload, S>

  type BeritaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BeritaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BeritaCountAggregateInputType | true
    }

  export interface BeritaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Berita'], meta: { name: 'Berita' } }
    /**
     * Find zero or one Berita that matches the filter.
     * @param {BeritaFindUniqueArgs} args - Arguments to find a Berita
     * @example
     * // Get one Berita
     * const berita = await prisma.berita.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BeritaFindUniqueArgs>(args: SelectSubset<T, BeritaFindUniqueArgs<ExtArgs>>): Prisma__BeritaClient<$Result.GetResult<Prisma.$BeritaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Berita that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BeritaFindUniqueOrThrowArgs} args - Arguments to find a Berita
     * @example
     * // Get one Berita
     * const berita = await prisma.berita.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BeritaFindUniqueOrThrowArgs>(args: SelectSubset<T, BeritaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BeritaClient<$Result.GetResult<Prisma.$BeritaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Berita that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeritaFindFirstArgs} args - Arguments to find a Berita
     * @example
     * // Get one Berita
     * const berita = await prisma.berita.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BeritaFindFirstArgs>(args?: SelectSubset<T, BeritaFindFirstArgs<ExtArgs>>): Prisma__BeritaClient<$Result.GetResult<Prisma.$BeritaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Berita that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeritaFindFirstOrThrowArgs} args - Arguments to find a Berita
     * @example
     * // Get one Berita
     * const berita = await prisma.berita.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BeritaFindFirstOrThrowArgs>(args?: SelectSubset<T, BeritaFindFirstOrThrowArgs<ExtArgs>>): Prisma__BeritaClient<$Result.GetResult<Prisma.$BeritaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Beritas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeritaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Beritas
     * const beritas = await prisma.berita.findMany()
     * 
     * // Get first 10 Beritas
     * const beritas = await prisma.berita.findMany({ take: 10 })
     * 
     * // Only select the `berita_id`
     * const beritaWithBerita_idOnly = await prisma.berita.findMany({ select: { berita_id: true } })
     * 
     */
    findMany<T extends BeritaFindManyArgs>(args?: SelectSubset<T, BeritaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeritaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Berita.
     * @param {BeritaCreateArgs} args - Arguments to create a Berita.
     * @example
     * // Create one Berita
     * const Berita = await prisma.berita.create({
     *   data: {
     *     // ... data to create a Berita
     *   }
     * })
     * 
     */
    create<T extends BeritaCreateArgs>(args: SelectSubset<T, BeritaCreateArgs<ExtArgs>>): Prisma__BeritaClient<$Result.GetResult<Prisma.$BeritaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Beritas.
     * @param {BeritaCreateManyArgs} args - Arguments to create many Beritas.
     * @example
     * // Create many Beritas
     * const berita = await prisma.berita.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BeritaCreateManyArgs>(args?: SelectSubset<T, BeritaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Berita.
     * @param {BeritaDeleteArgs} args - Arguments to delete one Berita.
     * @example
     * // Delete one Berita
     * const Berita = await prisma.berita.delete({
     *   where: {
     *     // ... filter to delete one Berita
     *   }
     * })
     * 
     */
    delete<T extends BeritaDeleteArgs>(args: SelectSubset<T, BeritaDeleteArgs<ExtArgs>>): Prisma__BeritaClient<$Result.GetResult<Prisma.$BeritaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Berita.
     * @param {BeritaUpdateArgs} args - Arguments to update one Berita.
     * @example
     * // Update one Berita
     * const berita = await prisma.berita.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BeritaUpdateArgs>(args: SelectSubset<T, BeritaUpdateArgs<ExtArgs>>): Prisma__BeritaClient<$Result.GetResult<Prisma.$BeritaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Beritas.
     * @param {BeritaDeleteManyArgs} args - Arguments to filter Beritas to delete.
     * @example
     * // Delete a few Beritas
     * const { count } = await prisma.berita.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BeritaDeleteManyArgs>(args?: SelectSubset<T, BeritaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Beritas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeritaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Beritas
     * const berita = await prisma.berita.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BeritaUpdateManyArgs>(args: SelectSubset<T, BeritaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Berita.
     * @param {BeritaUpsertArgs} args - Arguments to update or create a Berita.
     * @example
     * // Update or create a Berita
     * const berita = await prisma.berita.upsert({
     *   create: {
     *     // ... data to create a Berita
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Berita we want to update
     *   }
     * })
     */
    upsert<T extends BeritaUpsertArgs>(args: SelectSubset<T, BeritaUpsertArgs<ExtArgs>>): Prisma__BeritaClient<$Result.GetResult<Prisma.$BeritaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Beritas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeritaCountArgs} args - Arguments to filter Beritas to count.
     * @example
     * // Count the number of Beritas
     * const count = await prisma.berita.count({
     *   where: {
     *     // ... the filter for the Beritas we want to count
     *   }
     * })
    **/
    count<T extends BeritaCountArgs>(
      args?: Subset<T, BeritaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BeritaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Berita.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeritaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BeritaAggregateArgs>(args: Subset<T, BeritaAggregateArgs>): Prisma.PrismaPromise<GetBeritaAggregateType<T>>

    /**
     * Group by Berita.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeritaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BeritaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BeritaGroupByArgs['orderBy'] }
        : { orderBy?: BeritaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BeritaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBeritaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Berita model
   */
  readonly fields: BeritaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Berita.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BeritaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Berita model
   */
  interface BeritaFieldRefs {
    readonly berita_id: FieldRef<"Berita", 'Int'>
    readonly judul: FieldRef<"Berita", 'String'>
    readonly kategori: FieldRef<"Berita", 'String'>
    readonly photo: FieldRef<"Berita", 'Bytes'>
    readonly tanggal: FieldRef<"Berita", 'String'>
    readonly kontent: FieldRef<"Berita", 'String'>
    readonly status: FieldRef<"Berita", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Berita findUnique
   */
  export type BeritaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Berita
     */
    select?: BeritaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Berita
     */
    omit?: BeritaOmit<ExtArgs> | null
    /**
     * Filter, which Berita to fetch.
     */
    where: BeritaWhereUniqueInput
  }

  /**
   * Berita findUniqueOrThrow
   */
  export type BeritaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Berita
     */
    select?: BeritaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Berita
     */
    omit?: BeritaOmit<ExtArgs> | null
    /**
     * Filter, which Berita to fetch.
     */
    where: BeritaWhereUniqueInput
  }

  /**
   * Berita findFirst
   */
  export type BeritaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Berita
     */
    select?: BeritaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Berita
     */
    omit?: BeritaOmit<ExtArgs> | null
    /**
     * Filter, which Berita to fetch.
     */
    where?: BeritaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beritas to fetch.
     */
    orderBy?: BeritaOrderByWithRelationInput | BeritaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Beritas.
     */
    cursor?: BeritaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beritas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beritas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Beritas.
     */
    distinct?: BeritaScalarFieldEnum | BeritaScalarFieldEnum[]
  }

  /**
   * Berita findFirstOrThrow
   */
  export type BeritaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Berita
     */
    select?: BeritaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Berita
     */
    omit?: BeritaOmit<ExtArgs> | null
    /**
     * Filter, which Berita to fetch.
     */
    where?: BeritaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beritas to fetch.
     */
    orderBy?: BeritaOrderByWithRelationInput | BeritaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Beritas.
     */
    cursor?: BeritaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beritas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beritas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Beritas.
     */
    distinct?: BeritaScalarFieldEnum | BeritaScalarFieldEnum[]
  }

  /**
   * Berita findMany
   */
  export type BeritaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Berita
     */
    select?: BeritaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Berita
     */
    omit?: BeritaOmit<ExtArgs> | null
    /**
     * Filter, which Beritas to fetch.
     */
    where?: BeritaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beritas to fetch.
     */
    orderBy?: BeritaOrderByWithRelationInput | BeritaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Beritas.
     */
    cursor?: BeritaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beritas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beritas.
     */
    skip?: number
    distinct?: BeritaScalarFieldEnum | BeritaScalarFieldEnum[]
  }

  /**
   * Berita create
   */
  export type BeritaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Berita
     */
    select?: BeritaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Berita
     */
    omit?: BeritaOmit<ExtArgs> | null
    /**
     * The data needed to create a Berita.
     */
    data: XOR<BeritaCreateInput, BeritaUncheckedCreateInput>
  }

  /**
   * Berita createMany
   */
  export type BeritaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Beritas.
     */
    data: BeritaCreateManyInput | BeritaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Berita update
   */
  export type BeritaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Berita
     */
    select?: BeritaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Berita
     */
    omit?: BeritaOmit<ExtArgs> | null
    /**
     * The data needed to update a Berita.
     */
    data: XOR<BeritaUpdateInput, BeritaUncheckedUpdateInput>
    /**
     * Choose, which Berita to update.
     */
    where: BeritaWhereUniqueInput
  }

  /**
   * Berita updateMany
   */
  export type BeritaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Beritas.
     */
    data: XOR<BeritaUpdateManyMutationInput, BeritaUncheckedUpdateManyInput>
    /**
     * Filter which Beritas to update
     */
    where?: BeritaWhereInput
    /**
     * Limit how many Beritas to update.
     */
    limit?: number
  }

  /**
   * Berita upsert
   */
  export type BeritaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Berita
     */
    select?: BeritaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Berita
     */
    omit?: BeritaOmit<ExtArgs> | null
    /**
     * The filter to search for the Berita to update in case it exists.
     */
    where: BeritaWhereUniqueInput
    /**
     * In case the Berita found by the `where` argument doesn't exist, create a new Berita with this data.
     */
    create: XOR<BeritaCreateInput, BeritaUncheckedCreateInput>
    /**
     * In case the Berita was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BeritaUpdateInput, BeritaUncheckedUpdateInput>
  }

  /**
   * Berita delete
   */
  export type BeritaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Berita
     */
    select?: BeritaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Berita
     */
    omit?: BeritaOmit<ExtArgs> | null
    /**
     * Filter which Berita to delete.
     */
    where: BeritaWhereUniqueInput
  }

  /**
   * Berita deleteMany
   */
  export type BeritaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Beritas to delete
     */
    where?: BeritaWhereInput
    /**
     * Limit how many Beritas to delete.
     */
    limit?: number
  }

  /**
   * Berita without action
   */
  export type BeritaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Berita
     */
    select?: BeritaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Berita
     */
    omit?: BeritaOmit<ExtArgs> | null
  }


  /**
   * Model Laporan
   */

  export type AggregateLaporan = {
    _count: LaporanCountAggregateOutputType | null
    _avg: LaporanAvgAggregateOutputType | null
    _sum: LaporanSumAggregateOutputType | null
    _min: LaporanMinAggregateOutputType | null
    _max: LaporanMaxAggregateOutputType | null
  }

  export type LaporanAvgAggregateOutputType = {
    laporan_id: number | null
    vote: number | null
  }

  export type LaporanSumAggregateOutputType = {
    laporan_id: number | null
    vote: number | null
  }

  export type LaporanMinAggregateOutputType = {
    laporan_id: number | null
    nama: string | null
    keluhan: string | null
    deskripsi: string | null
    photo: Uint8Array | null
    tanggal: string | null
    lokasi: string | null
    vote: number | null
    status: string | null
  }

  export type LaporanMaxAggregateOutputType = {
    laporan_id: number | null
    nama: string | null
    keluhan: string | null
    deskripsi: string | null
    photo: Uint8Array | null
    tanggal: string | null
    lokasi: string | null
    vote: number | null
    status: string | null
  }

  export type LaporanCountAggregateOutputType = {
    laporan_id: number
    nama: number
    keluhan: number
    deskripsi: number
    photo: number
    tanggal: number
    lokasi: number
    vote: number
    status: number
    _all: number
  }


  export type LaporanAvgAggregateInputType = {
    laporan_id?: true
    vote?: true
  }

  export type LaporanSumAggregateInputType = {
    laporan_id?: true
    vote?: true
  }

  export type LaporanMinAggregateInputType = {
    laporan_id?: true
    nama?: true
    keluhan?: true
    deskripsi?: true
    photo?: true
    tanggal?: true
    lokasi?: true
    vote?: true
    status?: true
  }

  export type LaporanMaxAggregateInputType = {
    laporan_id?: true
    nama?: true
    keluhan?: true
    deskripsi?: true
    photo?: true
    tanggal?: true
    lokasi?: true
    vote?: true
    status?: true
  }

  export type LaporanCountAggregateInputType = {
    laporan_id?: true
    nama?: true
    keluhan?: true
    deskripsi?: true
    photo?: true
    tanggal?: true
    lokasi?: true
    vote?: true
    status?: true
    _all?: true
  }

  export type LaporanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Laporan to aggregate.
     */
    where?: LaporanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Laporans to fetch.
     */
    orderBy?: LaporanOrderByWithRelationInput | LaporanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LaporanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Laporans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Laporans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Laporans
    **/
    _count?: true | LaporanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LaporanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LaporanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LaporanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LaporanMaxAggregateInputType
  }

  export type GetLaporanAggregateType<T extends LaporanAggregateArgs> = {
        [P in keyof T & keyof AggregateLaporan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLaporan[P]>
      : GetScalarType<T[P], AggregateLaporan[P]>
  }




  export type LaporanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LaporanWhereInput
    orderBy?: LaporanOrderByWithAggregationInput | LaporanOrderByWithAggregationInput[]
    by: LaporanScalarFieldEnum[] | LaporanScalarFieldEnum
    having?: LaporanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LaporanCountAggregateInputType | true
    _avg?: LaporanAvgAggregateInputType
    _sum?: LaporanSumAggregateInputType
    _min?: LaporanMinAggregateInputType
    _max?: LaporanMaxAggregateInputType
  }

  export type LaporanGroupByOutputType = {
    laporan_id: number
    nama: string
    keluhan: string
    deskripsi: string
    photo: Uint8Array
    tanggal: string | null
    lokasi: string
    vote: number | null
    status: string
    _count: LaporanCountAggregateOutputType | null
    _avg: LaporanAvgAggregateOutputType | null
    _sum: LaporanSumAggregateOutputType | null
    _min: LaporanMinAggregateOutputType | null
    _max: LaporanMaxAggregateOutputType | null
  }

  type GetLaporanGroupByPayload<T extends LaporanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LaporanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LaporanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LaporanGroupByOutputType[P]>
            : GetScalarType<T[P], LaporanGroupByOutputType[P]>
        }
      >
    >


  export type LaporanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    laporan_id?: boolean
    nama?: boolean
    keluhan?: boolean
    deskripsi?: boolean
    photo?: boolean
    tanggal?: boolean
    lokasi?: boolean
    vote?: boolean
    status?: boolean
  }, ExtArgs["result"]["laporan"]>



  export type LaporanSelectScalar = {
    laporan_id?: boolean
    nama?: boolean
    keluhan?: boolean
    deskripsi?: boolean
    photo?: boolean
    tanggal?: boolean
    lokasi?: boolean
    vote?: boolean
    status?: boolean
  }

  export type LaporanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"laporan_id" | "nama" | "keluhan" | "deskripsi" | "photo" | "tanggal" | "lokasi" | "vote" | "status", ExtArgs["result"]["laporan"]>

  export type $LaporanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Laporan"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      laporan_id: number
      nama: string
      keluhan: string
      deskripsi: string
      photo: Uint8Array
      tanggal: string | null
      lokasi: string
      vote: number | null
      status: string
    }, ExtArgs["result"]["laporan"]>
    composites: {}
  }

  type LaporanGetPayload<S extends boolean | null | undefined | LaporanDefaultArgs> = $Result.GetResult<Prisma.$LaporanPayload, S>

  type LaporanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LaporanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LaporanCountAggregateInputType | true
    }

  export interface LaporanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Laporan'], meta: { name: 'Laporan' } }
    /**
     * Find zero or one Laporan that matches the filter.
     * @param {LaporanFindUniqueArgs} args - Arguments to find a Laporan
     * @example
     * // Get one Laporan
     * const laporan = await prisma.laporan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LaporanFindUniqueArgs>(args: SelectSubset<T, LaporanFindUniqueArgs<ExtArgs>>): Prisma__LaporanClient<$Result.GetResult<Prisma.$LaporanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Laporan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LaporanFindUniqueOrThrowArgs} args - Arguments to find a Laporan
     * @example
     * // Get one Laporan
     * const laporan = await prisma.laporan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LaporanFindUniqueOrThrowArgs>(args: SelectSubset<T, LaporanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LaporanClient<$Result.GetResult<Prisma.$LaporanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Laporan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaporanFindFirstArgs} args - Arguments to find a Laporan
     * @example
     * // Get one Laporan
     * const laporan = await prisma.laporan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LaporanFindFirstArgs>(args?: SelectSubset<T, LaporanFindFirstArgs<ExtArgs>>): Prisma__LaporanClient<$Result.GetResult<Prisma.$LaporanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Laporan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaporanFindFirstOrThrowArgs} args - Arguments to find a Laporan
     * @example
     * // Get one Laporan
     * const laporan = await prisma.laporan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LaporanFindFirstOrThrowArgs>(args?: SelectSubset<T, LaporanFindFirstOrThrowArgs<ExtArgs>>): Prisma__LaporanClient<$Result.GetResult<Prisma.$LaporanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Laporans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaporanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Laporans
     * const laporans = await prisma.laporan.findMany()
     * 
     * // Get first 10 Laporans
     * const laporans = await prisma.laporan.findMany({ take: 10 })
     * 
     * // Only select the `laporan_id`
     * const laporanWithLaporan_idOnly = await prisma.laporan.findMany({ select: { laporan_id: true } })
     * 
     */
    findMany<T extends LaporanFindManyArgs>(args?: SelectSubset<T, LaporanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LaporanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Laporan.
     * @param {LaporanCreateArgs} args - Arguments to create a Laporan.
     * @example
     * // Create one Laporan
     * const Laporan = await prisma.laporan.create({
     *   data: {
     *     // ... data to create a Laporan
     *   }
     * })
     * 
     */
    create<T extends LaporanCreateArgs>(args: SelectSubset<T, LaporanCreateArgs<ExtArgs>>): Prisma__LaporanClient<$Result.GetResult<Prisma.$LaporanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Laporans.
     * @param {LaporanCreateManyArgs} args - Arguments to create many Laporans.
     * @example
     * // Create many Laporans
     * const laporan = await prisma.laporan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LaporanCreateManyArgs>(args?: SelectSubset<T, LaporanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Laporan.
     * @param {LaporanDeleteArgs} args - Arguments to delete one Laporan.
     * @example
     * // Delete one Laporan
     * const Laporan = await prisma.laporan.delete({
     *   where: {
     *     // ... filter to delete one Laporan
     *   }
     * })
     * 
     */
    delete<T extends LaporanDeleteArgs>(args: SelectSubset<T, LaporanDeleteArgs<ExtArgs>>): Prisma__LaporanClient<$Result.GetResult<Prisma.$LaporanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Laporan.
     * @param {LaporanUpdateArgs} args - Arguments to update one Laporan.
     * @example
     * // Update one Laporan
     * const laporan = await prisma.laporan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LaporanUpdateArgs>(args: SelectSubset<T, LaporanUpdateArgs<ExtArgs>>): Prisma__LaporanClient<$Result.GetResult<Prisma.$LaporanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Laporans.
     * @param {LaporanDeleteManyArgs} args - Arguments to filter Laporans to delete.
     * @example
     * // Delete a few Laporans
     * const { count } = await prisma.laporan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LaporanDeleteManyArgs>(args?: SelectSubset<T, LaporanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Laporans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaporanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Laporans
     * const laporan = await prisma.laporan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LaporanUpdateManyArgs>(args: SelectSubset<T, LaporanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Laporan.
     * @param {LaporanUpsertArgs} args - Arguments to update or create a Laporan.
     * @example
     * // Update or create a Laporan
     * const laporan = await prisma.laporan.upsert({
     *   create: {
     *     // ... data to create a Laporan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Laporan we want to update
     *   }
     * })
     */
    upsert<T extends LaporanUpsertArgs>(args: SelectSubset<T, LaporanUpsertArgs<ExtArgs>>): Prisma__LaporanClient<$Result.GetResult<Prisma.$LaporanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Laporans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaporanCountArgs} args - Arguments to filter Laporans to count.
     * @example
     * // Count the number of Laporans
     * const count = await prisma.laporan.count({
     *   where: {
     *     // ... the filter for the Laporans we want to count
     *   }
     * })
    **/
    count<T extends LaporanCountArgs>(
      args?: Subset<T, LaporanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LaporanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Laporan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaporanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LaporanAggregateArgs>(args: Subset<T, LaporanAggregateArgs>): Prisma.PrismaPromise<GetLaporanAggregateType<T>>

    /**
     * Group by Laporan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaporanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LaporanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LaporanGroupByArgs['orderBy'] }
        : { orderBy?: LaporanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LaporanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLaporanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Laporan model
   */
  readonly fields: LaporanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Laporan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LaporanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Laporan model
   */
  interface LaporanFieldRefs {
    readonly laporan_id: FieldRef<"Laporan", 'Int'>
    readonly nama: FieldRef<"Laporan", 'String'>
    readonly keluhan: FieldRef<"Laporan", 'String'>
    readonly deskripsi: FieldRef<"Laporan", 'String'>
    readonly photo: FieldRef<"Laporan", 'Bytes'>
    readonly tanggal: FieldRef<"Laporan", 'String'>
    readonly lokasi: FieldRef<"Laporan", 'String'>
    readonly vote: FieldRef<"Laporan", 'Int'>
    readonly status: FieldRef<"Laporan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Laporan findUnique
   */
  export type LaporanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laporan
     */
    select?: LaporanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Laporan
     */
    omit?: LaporanOmit<ExtArgs> | null
    /**
     * Filter, which Laporan to fetch.
     */
    where: LaporanWhereUniqueInput
  }

  /**
   * Laporan findUniqueOrThrow
   */
  export type LaporanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laporan
     */
    select?: LaporanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Laporan
     */
    omit?: LaporanOmit<ExtArgs> | null
    /**
     * Filter, which Laporan to fetch.
     */
    where: LaporanWhereUniqueInput
  }

  /**
   * Laporan findFirst
   */
  export type LaporanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laporan
     */
    select?: LaporanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Laporan
     */
    omit?: LaporanOmit<ExtArgs> | null
    /**
     * Filter, which Laporan to fetch.
     */
    where?: LaporanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Laporans to fetch.
     */
    orderBy?: LaporanOrderByWithRelationInput | LaporanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Laporans.
     */
    cursor?: LaporanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Laporans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Laporans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Laporans.
     */
    distinct?: LaporanScalarFieldEnum | LaporanScalarFieldEnum[]
  }

  /**
   * Laporan findFirstOrThrow
   */
  export type LaporanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laporan
     */
    select?: LaporanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Laporan
     */
    omit?: LaporanOmit<ExtArgs> | null
    /**
     * Filter, which Laporan to fetch.
     */
    where?: LaporanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Laporans to fetch.
     */
    orderBy?: LaporanOrderByWithRelationInput | LaporanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Laporans.
     */
    cursor?: LaporanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Laporans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Laporans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Laporans.
     */
    distinct?: LaporanScalarFieldEnum | LaporanScalarFieldEnum[]
  }

  /**
   * Laporan findMany
   */
  export type LaporanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laporan
     */
    select?: LaporanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Laporan
     */
    omit?: LaporanOmit<ExtArgs> | null
    /**
     * Filter, which Laporans to fetch.
     */
    where?: LaporanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Laporans to fetch.
     */
    orderBy?: LaporanOrderByWithRelationInput | LaporanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Laporans.
     */
    cursor?: LaporanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Laporans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Laporans.
     */
    skip?: number
    distinct?: LaporanScalarFieldEnum | LaporanScalarFieldEnum[]
  }

  /**
   * Laporan create
   */
  export type LaporanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laporan
     */
    select?: LaporanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Laporan
     */
    omit?: LaporanOmit<ExtArgs> | null
    /**
     * The data needed to create a Laporan.
     */
    data: XOR<LaporanCreateInput, LaporanUncheckedCreateInput>
  }

  /**
   * Laporan createMany
   */
  export type LaporanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Laporans.
     */
    data: LaporanCreateManyInput | LaporanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Laporan update
   */
  export type LaporanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laporan
     */
    select?: LaporanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Laporan
     */
    omit?: LaporanOmit<ExtArgs> | null
    /**
     * The data needed to update a Laporan.
     */
    data: XOR<LaporanUpdateInput, LaporanUncheckedUpdateInput>
    /**
     * Choose, which Laporan to update.
     */
    where: LaporanWhereUniqueInput
  }

  /**
   * Laporan updateMany
   */
  export type LaporanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Laporans.
     */
    data: XOR<LaporanUpdateManyMutationInput, LaporanUncheckedUpdateManyInput>
    /**
     * Filter which Laporans to update
     */
    where?: LaporanWhereInput
    /**
     * Limit how many Laporans to update.
     */
    limit?: number
  }

  /**
   * Laporan upsert
   */
  export type LaporanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laporan
     */
    select?: LaporanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Laporan
     */
    omit?: LaporanOmit<ExtArgs> | null
    /**
     * The filter to search for the Laporan to update in case it exists.
     */
    where: LaporanWhereUniqueInput
    /**
     * In case the Laporan found by the `where` argument doesn't exist, create a new Laporan with this data.
     */
    create: XOR<LaporanCreateInput, LaporanUncheckedCreateInput>
    /**
     * In case the Laporan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LaporanUpdateInput, LaporanUncheckedUpdateInput>
  }

  /**
   * Laporan delete
   */
  export type LaporanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laporan
     */
    select?: LaporanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Laporan
     */
    omit?: LaporanOmit<ExtArgs> | null
    /**
     * Filter which Laporan to delete.
     */
    where: LaporanWhereUniqueInput
  }

  /**
   * Laporan deleteMany
   */
  export type LaporanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Laporans to delete
     */
    where?: LaporanWhereInput
    /**
     * Limit how many Laporans to delete.
     */
    limit?: number
  }

  /**
   * Laporan without action
   */
  export type LaporanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laporan
     */
    select?: LaporanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Laporan
     */
    omit?: LaporanOmit<ExtArgs> | null
  }


  /**
   * Model Surat
   */

  export type AggregateSurat = {
    _count: SuratCountAggregateOutputType | null
    _avg: SuratAvgAggregateOutputType | null
    _sum: SuratSumAggregateOutputType | null
    _min: SuratMinAggregateOutputType | null
    _max: SuratMaxAggregateOutputType | null
  }

  export type SuratAvgAggregateOutputType = {
    surat_id: number | null
  }

  export type SuratSumAggregateOutputType = {
    surat_id: number | null
  }

  export type SuratMinAggregateOutputType = {
    surat_id: number | null
    nama: string | null
    nik: string | null
    tempat_lahir: string | null
    tanggal_lahir: Date | null
    jenis_kelamin: string | null
    agama: string | null
    alamat: string | null
    jenis_surat: string | null
    tujuan_surat: string | null
    photo_ktp: Uint8Array | null
    photo_kk: Uint8Array | null
    foto_usaha: Uint8Array | null
    waktu_kematian: string | null
    gaji_ortu: Uint8Array | null
    tanggal: Date | null
  }

  export type SuratMaxAggregateOutputType = {
    surat_id: number | null
    nama: string | null
    nik: string | null
    tempat_lahir: string | null
    tanggal_lahir: Date | null
    jenis_kelamin: string | null
    agama: string | null
    alamat: string | null
    jenis_surat: string | null
    tujuan_surat: string | null
    photo_ktp: Uint8Array | null
    photo_kk: Uint8Array | null
    foto_usaha: Uint8Array | null
    waktu_kematian: string | null
    gaji_ortu: Uint8Array | null
    tanggal: Date | null
  }

  export type SuratCountAggregateOutputType = {
    surat_id: number
    nama: number
    nik: number
    tempat_lahir: number
    tanggal_lahir: number
    jenis_kelamin: number
    agama: number
    alamat: number
    jenis_surat: number
    tujuan_surat: number
    photo_ktp: number
    photo_kk: number
    foto_usaha: number
    waktu_kematian: number
    gaji_ortu: number
    tanggal: number
    _all: number
  }


  export type SuratAvgAggregateInputType = {
    surat_id?: true
  }

  export type SuratSumAggregateInputType = {
    surat_id?: true
  }

  export type SuratMinAggregateInputType = {
    surat_id?: true
    nama?: true
    nik?: true
    tempat_lahir?: true
    tanggal_lahir?: true
    jenis_kelamin?: true
    agama?: true
    alamat?: true
    jenis_surat?: true
    tujuan_surat?: true
    photo_ktp?: true
    photo_kk?: true
    foto_usaha?: true
    waktu_kematian?: true
    gaji_ortu?: true
    tanggal?: true
  }

  export type SuratMaxAggregateInputType = {
    surat_id?: true
    nama?: true
    nik?: true
    tempat_lahir?: true
    tanggal_lahir?: true
    jenis_kelamin?: true
    agama?: true
    alamat?: true
    jenis_surat?: true
    tujuan_surat?: true
    photo_ktp?: true
    photo_kk?: true
    foto_usaha?: true
    waktu_kematian?: true
    gaji_ortu?: true
    tanggal?: true
  }

  export type SuratCountAggregateInputType = {
    surat_id?: true
    nama?: true
    nik?: true
    tempat_lahir?: true
    tanggal_lahir?: true
    jenis_kelamin?: true
    agama?: true
    alamat?: true
    jenis_surat?: true
    tujuan_surat?: true
    photo_ktp?: true
    photo_kk?: true
    foto_usaha?: true
    waktu_kematian?: true
    gaji_ortu?: true
    tanggal?: true
    _all?: true
  }

  export type SuratAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Surat to aggregate.
     */
    where?: SuratWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surats to fetch.
     */
    orderBy?: SuratOrderByWithRelationInput | SuratOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuratWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Surats
    **/
    _count?: true | SuratCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuratAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuratSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuratMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuratMaxAggregateInputType
  }

  export type GetSuratAggregateType<T extends SuratAggregateArgs> = {
        [P in keyof T & keyof AggregateSurat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurat[P]>
      : GetScalarType<T[P], AggregateSurat[P]>
  }




  export type SuratGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuratWhereInput
    orderBy?: SuratOrderByWithAggregationInput | SuratOrderByWithAggregationInput[]
    by: SuratScalarFieldEnum[] | SuratScalarFieldEnum
    having?: SuratScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuratCountAggregateInputType | true
    _avg?: SuratAvgAggregateInputType
    _sum?: SuratSumAggregateInputType
    _min?: SuratMinAggregateInputType
    _max?: SuratMaxAggregateInputType
  }

  export type SuratGroupByOutputType = {
    surat_id: number
    nama: string
    nik: string
    tempat_lahir: string
    tanggal_lahir: Date
    jenis_kelamin: string
    agama: string
    alamat: string
    jenis_surat: string
    tujuan_surat: string
    photo_ktp: Uint8Array | null
    photo_kk: Uint8Array | null
    foto_usaha: Uint8Array | null
    waktu_kematian: string | null
    gaji_ortu: Uint8Array | null
    tanggal: Date
    _count: SuratCountAggregateOutputType | null
    _avg: SuratAvgAggregateOutputType | null
    _sum: SuratSumAggregateOutputType | null
    _min: SuratMinAggregateOutputType | null
    _max: SuratMaxAggregateOutputType | null
  }

  type GetSuratGroupByPayload<T extends SuratGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuratGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuratGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuratGroupByOutputType[P]>
            : GetScalarType<T[P], SuratGroupByOutputType[P]>
        }
      >
    >


  export type SuratSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    surat_id?: boolean
    nama?: boolean
    nik?: boolean
    tempat_lahir?: boolean
    tanggal_lahir?: boolean
    jenis_kelamin?: boolean
    agama?: boolean
    alamat?: boolean
    jenis_surat?: boolean
    tujuan_surat?: boolean
    photo_ktp?: boolean
    photo_kk?: boolean
    foto_usaha?: boolean
    waktu_kematian?: boolean
    gaji_ortu?: boolean
    tanggal?: boolean
  }, ExtArgs["result"]["surat"]>



  export type SuratSelectScalar = {
    surat_id?: boolean
    nama?: boolean
    nik?: boolean
    tempat_lahir?: boolean
    tanggal_lahir?: boolean
    jenis_kelamin?: boolean
    agama?: boolean
    alamat?: boolean
    jenis_surat?: boolean
    tujuan_surat?: boolean
    photo_ktp?: boolean
    photo_kk?: boolean
    foto_usaha?: boolean
    waktu_kematian?: boolean
    gaji_ortu?: boolean
    tanggal?: boolean
  }

  export type SuratOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"surat_id" | "nama" | "nik" | "tempat_lahir" | "tanggal_lahir" | "jenis_kelamin" | "agama" | "alamat" | "jenis_surat" | "tujuan_surat" | "photo_ktp" | "photo_kk" | "foto_usaha" | "waktu_kematian" | "gaji_ortu" | "tanggal", ExtArgs["result"]["surat"]>

  export type $SuratPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Surat"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      surat_id: number
      nama: string
      nik: string
      tempat_lahir: string
      tanggal_lahir: Date
      jenis_kelamin: string
      agama: string
      alamat: string
      jenis_surat: string
      tujuan_surat: string
      photo_ktp: Uint8Array | null
      photo_kk: Uint8Array | null
      foto_usaha: Uint8Array | null
      waktu_kematian: string | null
      gaji_ortu: Uint8Array | null
      tanggal: Date
    }, ExtArgs["result"]["surat"]>
    composites: {}
  }

  type SuratGetPayload<S extends boolean | null | undefined | SuratDefaultArgs> = $Result.GetResult<Prisma.$SuratPayload, S>

  type SuratCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SuratFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SuratCountAggregateInputType | true
    }

  export interface SuratDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Surat'], meta: { name: 'Surat' } }
    /**
     * Find zero or one Surat that matches the filter.
     * @param {SuratFindUniqueArgs} args - Arguments to find a Surat
     * @example
     * // Get one Surat
     * const surat = await prisma.surat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SuratFindUniqueArgs>(args: SelectSubset<T, SuratFindUniqueArgs<ExtArgs>>): Prisma__SuratClient<$Result.GetResult<Prisma.$SuratPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Surat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SuratFindUniqueOrThrowArgs} args - Arguments to find a Surat
     * @example
     * // Get one Surat
     * const surat = await prisma.surat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SuratFindUniqueOrThrowArgs>(args: SelectSubset<T, SuratFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SuratClient<$Result.GetResult<Prisma.$SuratPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Surat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuratFindFirstArgs} args - Arguments to find a Surat
     * @example
     * // Get one Surat
     * const surat = await prisma.surat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SuratFindFirstArgs>(args?: SelectSubset<T, SuratFindFirstArgs<ExtArgs>>): Prisma__SuratClient<$Result.GetResult<Prisma.$SuratPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Surat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuratFindFirstOrThrowArgs} args - Arguments to find a Surat
     * @example
     * // Get one Surat
     * const surat = await prisma.surat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SuratFindFirstOrThrowArgs>(args?: SelectSubset<T, SuratFindFirstOrThrowArgs<ExtArgs>>): Prisma__SuratClient<$Result.GetResult<Prisma.$SuratPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Surats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuratFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Surats
     * const surats = await prisma.surat.findMany()
     * 
     * // Get first 10 Surats
     * const surats = await prisma.surat.findMany({ take: 10 })
     * 
     * // Only select the `surat_id`
     * const suratWithSurat_idOnly = await prisma.surat.findMany({ select: { surat_id: true } })
     * 
     */
    findMany<T extends SuratFindManyArgs>(args?: SelectSubset<T, SuratFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuratPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Surat.
     * @param {SuratCreateArgs} args - Arguments to create a Surat.
     * @example
     * // Create one Surat
     * const Surat = await prisma.surat.create({
     *   data: {
     *     // ... data to create a Surat
     *   }
     * })
     * 
     */
    create<T extends SuratCreateArgs>(args: SelectSubset<T, SuratCreateArgs<ExtArgs>>): Prisma__SuratClient<$Result.GetResult<Prisma.$SuratPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Surats.
     * @param {SuratCreateManyArgs} args - Arguments to create many Surats.
     * @example
     * // Create many Surats
     * const surat = await prisma.surat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SuratCreateManyArgs>(args?: SelectSubset<T, SuratCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Surat.
     * @param {SuratDeleteArgs} args - Arguments to delete one Surat.
     * @example
     * // Delete one Surat
     * const Surat = await prisma.surat.delete({
     *   where: {
     *     // ... filter to delete one Surat
     *   }
     * })
     * 
     */
    delete<T extends SuratDeleteArgs>(args: SelectSubset<T, SuratDeleteArgs<ExtArgs>>): Prisma__SuratClient<$Result.GetResult<Prisma.$SuratPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Surat.
     * @param {SuratUpdateArgs} args - Arguments to update one Surat.
     * @example
     * // Update one Surat
     * const surat = await prisma.surat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SuratUpdateArgs>(args: SelectSubset<T, SuratUpdateArgs<ExtArgs>>): Prisma__SuratClient<$Result.GetResult<Prisma.$SuratPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Surats.
     * @param {SuratDeleteManyArgs} args - Arguments to filter Surats to delete.
     * @example
     * // Delete a few Surats
     * const { count } = await prisma.surat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SuratDeleteManyArgs>(args?: SelectSubset<T, SuratDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Surats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuratUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Surats
     * const surat = await prisma.surat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SuratUpdateManyArgs>(args: SelectSubset<T, SuratUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Surat.
     * @param {SuratUpsertArgs} args - Arguments to update or create a Surat.
     * @example
     * // Update or create a Surat
     * const surat = await prisma.surat.upsert({
     *   create: {
     *     // ... data to create a Surat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Surat we want to update
     *   }
     * })
     */
    upsert<T extends SuratUpsertArgs>(args: SelectSubset<T, SuratUpsertArgs<ExtArgs>>): Prisma__SuratClient<$Result.GetResult<Prisma.$SuratPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Surats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuratCountArgs} args - Arguments to filter Surats to count.
     * @example
     * // Count the number of Surats
     * const count = await prisma.surat.count({
     *   where: {
     *     // ... the filter for the Surats we want to count
     *   }
     * })
    **/
    count<T extends SuratCountArgs>(
      args?: Subset<T, SuratCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuratCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Surat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuratAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuratAggregateArgs>(args: Subset<T, SuratAggregateArgs>): Prisma.PrismaPromise<GetSuratAggregateType<T>>

    /**
     * Group by Surat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuratGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuratGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuratGroupByArgs['orderBy'] }
        : { orderBy?: SuratGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuratGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuratGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Surat model
   */
  readonly fields: SuratFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Surat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SuratClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Surat model
   */
  interface SuratFieldRefs {
    readonly surat_id: FieldRef<"Surat", 'Int'>
    readonly nama: FieldRef<"Surat", 'String'>
    readonly nik: FieldRef<"Surat", 'String'>
    readonly tempat_lahir: FieldRef<"Surat", 'String'>
    readonly tanggal_lahir: FieldRef<"Surat", 'DateTime'>
    readonly jenis_kelamin: FieldRef<"Surat", 'String'>
    readonly agama: FieldRef<"Surat", 'String'>
    readonly alamat: FieldRef<"Surat", 'String'>
    readonly jenis_surat: FieldRef<"Surat", 'String'>
    readonly tujuan_surat: FieldRef<"Surat", 'String'>
    readonly photo_ktp: FieldRef<"Surat", 'Bytes'>
    readonly photo_kk: FieldRef<"Surat", 'Bytes'>
    readonly foto_usaha: FieldRef<"Surat", 'Bytes'>
    readonly waktu_kematian: FieldRef<"Surat", 'String'>
    readonly gaji_ortu: FieldRef<"Surat", 'Bytes'>
    readonly tanggal: FieldRef<"Surat", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Surat findUnique
   */
  export type SuratFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surat
     */
    select?: SuratSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Surat
     */
    omit?: SuratOmit<ExtArgs> | null
    /**
     * Filter, which Surat to fetch.
     */
    where: SuratWhereUniqueInput
  }

  /**
   * Surat findUniqueOrThrow
   */
  export type SuratFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surat
     */
    select?: SuratSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Surat
     */
    omit?: SuratOmit<ExtArgs> | null
    /**
     * Filter, which Surat to fetch.
     */
    where: SuratWhereUniqueInput
  }

  /**
   * Surat findFirst
   */
  export type SuratFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surat
     */
    select?: SuratSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Surat
     */
    omit?: SuratOmit<ExtArgs> | null
    /**
     * Filter, which Surat to fetch.
     */
    where?: SuratWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surats to fetch.
     */
    orderBy?: SuratOrderByWithRelationInput | SuratOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surats.
     */
    cursor?: SuratWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surats.
     */
    distinct?: SuratScalarFieldEnum | SuratScalarFieldEnum[]
  }

  /**
   * Surat findFirstOrThrow
   */
  export type SuratFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surat
     */
    select?: SuratSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Surat
     */
    omit?: SuratOmit<ExtArgs> | null
    /**
     * Filter, which Surat to fetch.
     */
    where?: SuratWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surats to fetch.
     */
    orderBy?: SuratOrderByWithRelationInput | SuratOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surats.
     */
    cursor?: SuratWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surats.
     */
    distinct?: SuratScalarFieldEnum | SuratScalarFieldEnum[]
  }

  /**
   * Surat findMany
   */
  export type SuratFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surat
     */
    select?: SuratSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Surat
     */
    omit?: SuratOmit<ExtArgs> | null
    /**
     * Filter, which Surats to fetch.
     */
    where?: SuratWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surats to fetch.
     */
    orderBy?: SuratOrderByWithRelationInput | SuratOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Surats.
     */
    cursor?: SuratWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surats.
     */
    skip?: number
    distinct?: SuratScalarFieldEnum | SuratScalarFieldEnum[]
  }

  /**
   * Surat create
   */
  export type SuratCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surat
     */
    select?: SuratSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Surat
     */
    omit?: SuratOmit<ExtArgs> | null
    /**
     * The data needed to create a Surat.
     */
    data: XOR<SuratCreateInput, SuratUncheckedCreateInput>
  }

  /**
   * Surat createMany
   */
  export type SuratCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Surats.
     */
    data: SuratCreateManyInput | SuratCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Surat update
   */
  export type SuratUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surat
     */
    select?: SuratSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Surat
     */
    omit?: SuratOmit<ExtArgs> | null
    /**
     * The data needed to update a Surat.
     */
    data: XOR<SuratUpdateInput, SuratUncheckedUpdateInput>
    /**
     * Choose, which Surat to update.
     */
    where: SuratWhereUniqueInput
  }

  /**
   * Surat updateMany
   */
  export type SuratUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Surats.
     */
    data: XOR<SuratUpdateManyMutationInput, SuratUncheckedUpdateManyInput>
    /**
     * Filter which Surats to update
     */
    where?: SuratWhereInput
    /**
     * Limit how many Surats to update.
     */
    limit?: number
  }

  /**
   * Surat upsert
   */
  export type SuratUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surat
     */
    select?: SuratSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Surat
     */
    omit?: SuratOmit<ExtArgs> | null
    /**
     * The filter to search for the Surat to update in case it exists.
     */
    where: SuratWhereUniqueInput
    /**
     * In case the Surat found by the `where` argument doesn't exist, create a new Surat with this data.
     */
    create: XOR<SuratCreateInput, SuratUncheckedCreateInput>
    /**
     * In case the Surat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuratUpdateInput, SuratUncheckedUpdateInput>
  }

  /**
   * Surat delete
   */
  export type SuratDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surat
     */
    select?: SuratSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Surat
     */
    omit?: SuratOmit<ExtArgs> | null
    /**
     * Filter which Surat to delete.
     */
    where: SuratWhereUniqueInput
  }

  /**
   * Surat deleteMany
   */
  export type SuratDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Surats to delete
     */
    where?: SuratWhereInput
    /**
     * Limit how many Surats to delete.
     */
    limit?: number
  }

  /**
   * Surat without action
   */
  export type SuratDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surat
     */
    select?: SuratSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Surat
     */
    omit?: SuratOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    NIK: 'NIK',
    nama: 'nama',
    no_hp: 'no_hp',
    jenis_kel: 'jenis_kel',
    alamat: 'alamat',
    agama: 'agama',
    username: 'username',
    password: 'password',
    photo: 'photo',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const KeuanganScalarFieldEnum: {
    keuangan_id: 'keuangan_id',
    jenisTransaksi: 'jenisTransaksi',
    keterangan: 'keterangan',
    kategori: 'kategori',
    tanggal: 'tanggal',
    jumlah: 'jumlah',
    catatan: 'catatan'
  };

  export type KeuanganScalarFieldEnum = (typeof KeuanganScalarFieldEnum)[keyof typeof KeuanganScalarFieldEnum]


  export const BeritaScalarFieldEnum: {
    berita_id: 'berita_id',
    judul: 'judul',
    kategori: 'kategori',
    photo: 'photo',
    tanggal: 'tanggal',
    kontent: 'kontent',
    status: 'status'
  };

  export type BeritaScalarFieldEnum = (typeof BeritaScalarFieldEnum)[keyof typeof BeritaScalarFieldEnum]


  export const LaporanScalarFieldEnum: {
    laporan_id: 'laporan_id',
    nama: 'nama',
    keluhan: 'keluhan',
    deskripsi: 'deskripsi',
    photo: 'photo',
    tanggal: 'tanggal',
    lokasi: 'lokasi',
    vote: 'vote',
    status: 'status'
  };

  export type LaporanScalarFieldEnum = (typeof LaporanScalarFieldEnum)[keyof typeof LaporanScalarFieldEnum]


  export const SuratScalarFieldEnum: {
    surat_id: 'surat_id',
    nama: 'nama',
    nik: 'nik',
    tempat_lahir: 'tempat_lahir',
    tanggal_lahir: 'tanggal_lahir',
    jenis_kelamin: 'jenis_kelamin',
    agama: 'agama',
    alamat: 'alamat',
    jenis_surat: 'jenis_surat',
    tujuan_surat: 'tujuan_surat',
    photo_ktp: 'photo_ktp',
    photo_kk: 'photo_kk',
    foto_usaha: 'foto_usaha',
    waktu_kematian: 'waktu_kematian',
    gaji_ortu: 'gaji_ortu',
    tanggal: 'tanggal'
  };

  export type SuratScalarFieldEnum = (typeof SuratScalarFieldEnum)[keyof typeof SuratScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    NIK: 'NIK',
    nama: 'nama',
    no_hp: 'no_hp',
    jenis_kel: 'jenis_kel',
    alamat: 'alamat',
    agama: 'agama',
    username: 'username',
    password: 'password',
    role: 'role'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const KeuanganOrderByRelevanceFieldEnum: {
    jenisTransaksi: 'jenisTransaksi',
    keterangan: 'keterangan',
    kategori: 'kategori',
    catatan: 'catatan'
  };

  export type KeuanganOrderByRelevanceFieldEnum = (typeof KeuanganOrderByRelevanceFieldEnum)[keyof typeof KeuanganOrderByRelevanceFieldEnum]


  export const BeritaOrderByRelevanceFieldEnum: {
    judul: 'judul',
    kategori: 'kategori',
    tanggal: 'tanggal',
    kontent: 'kontent',
    status: 'status'
  };

  export type BeritaOrderByRelevanceFieldEnum = (typeof BeritaOrderByRelevanceFieldEnum)[keyof typeof BeritaOrderByRelevanceFieldEnum]


  export const LaporanOrderByRelevanceFieldEnum: {
    nama: 'nama',
    keluhan: 'keluhan',
    deskripsi: 'deskripsi',
    tanggal: 'tanggal',
    lokasi: 'lokasi',
    status: 'status'
  };

  export type LaporanOrderByRelevanceFieldEnum = (typeof LaporanOrderByRelevanceFieldEnum)[keyof typeof LaporanOrderByRelevanceFieldEnum]


  export const SuratOrderByRelevanceFieldEnum: {
    nama: 'nama',
    nik: 'nik',
    tempat_lahir: 'tempat_lahir',
    jenis_kelamin: 'jenis_kelamin',
    agama: 'agama',
    alamat: 'alamat',
    jenis_surat: 'jenis_surat',
    tujuan_surat: 'tujuan_surat',
    waktu_kematian: 'waktu_kematian'
  };

  export type SuratOrderByRelevanceFieldEnum = (typeof SuratOrderByRelevanceFieldEnum)[keyof typeof SuratOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: IntFilter<"User"> | number
    NIK?: StringFilter<"User"> | string
    nama?: StringFilter<"User"> | string
    no_hp?: StringFilter<"User"> | string
    jenis_kel?: StringFilter<"User"> | string
    alamat?: StringFilter<"User"> | string
    agama?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    photo?: BytesNullableFilter<"User"> | Uint8Array | null
    role?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    NIK?: SortOrder
    nama?: SortOrder
    no_hp?: SortOrder
    jenis_kel?: SortOrder
    alamat?: SortOrder
    agama?: SortOrder
    username?: SortOrder
    password?: SortOrder
    photo?: SortOrderInput | SortOrder
    role?: SortOrder
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    NIK?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    nama?: StringFilter<"User"> | string
    no_hp?: StringFilter<"User"> | string
    jenis_kel?: StringFilter<"User"> | string
    alamat?: StringFilter<"User"> | string
    agama?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    photo?: BytesNullableFilter<"User"> | Uint8Array | null
    role?: StringFilter<"User"> | string
  }, "user_id" | "NIK">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    NIK?: SortOrder
    nama?: SortOrder
    no_hp?: SortOrder
    jenis_kel?: SortOrder
    alamat?: SortOrder
    agama?: SortOrder
    username?: SortOrder
    password?: SortOrder
    photo?: SortOrderInput | SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"User"> | number
    NIK?: StringWithAggregatesFilter<"User"> | string
    nama?: StringWithAggregatesFilter<"User"> | string
    no_hp?: StringWithAggregatesFilter<"User"> | string
    jenis_kel?: StringWithAggregatesFilter<"User"> | string
    alamat?: StringWithAggregatesFilter<"User"> | string
    agama?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    photo?: BytesNullableWithAggregatesFilter<"User"> | Uint8Array | null
    role?: StringWithAggregatesFilter<"User"> | string
  }

  export type KeuanganWhereInput = {
    AND?: KeuanganWhereInput | KeuanganWhereInput[]
    OR?: KeuanganWhereInput[]
    NOT?: KeuanganWhereInput | KeuanganWhereInput[]
    keuangan_id?: IntFilter<"Keuangan"> | number
    jenisTransaksi?: StringFilter<"Keuangan"> | string
    keterangan?: StringFilter<"Keuangan"> | string
    kategori?: StringFilter<"Keuangan"> | string
    tanggal?: DateTimeFilter<"Keuangan"> | Date | string
    jumlah?: DecimalFilter<"Keuangan"> | Decimal | DecimalJsLike | number | string
    catatan?: StringFilter<"Keuangan"> | string
  }

  export type KeuanganOrderByWithRelationInput = {
    keuangan_id?: SortOrder
    jenisTransaksi?: SortOrder
    keterangan?: SortOrder
    kategori?: SortOrder
    tanggal?: SortOrder
    jumlah?: SortOrder
    catatan?: SortOrder
    _relevance?: KeuanganOrderByRelevanceInput
  }

  export type KeuanganWhereUniqueInput = Prisma.AtLeast<{
    keuangan_id?: number
    AND?: KeuanganWhereInput | KeuanganWhereInput[]
    OR?: KeuanganWhereInput[]
    NOT?: KeuanganWhereInput | KeuanganWhereInput[]
    jenisTransaksi?: StringFilter<"Keuangan"> | string
    keterangan?: StringFilter<"Keuangan"> | string
    kategori?: StringFilter<"Keuangan"> | string
    tanggal?: DateTimeFilter<"Keuangan"> | Date | string
    jumlah?: DecimalFilter<"Keuangan"> | Decimal | DecimalJsLike | number | string
    catatan?: StringFilter<"Keuangan"> | string
  }, "keuangan_id">

  export type KeuanganOrderByWithAggregationInput = {
    keuangan_id?: SortOrder
    jenisTransaksi?: SortOrder
    keterangan?: SortOrder
    kategori?: SortOrder
    tanggal?: SortOrder
    jumlah?: SortOrder
    catatan?: SortOrder
    _count?: KeuanganCountOrderByAggregateInput
    _avg?: KeuanganAvgOrderByAggregateInput
    _max?: KeuanganMaxOrderByAggregateInput
    _min?: KeuanganMinOrderByAggregateInput
    _sum?: KeuanganSumOrderByAggregateInput
  }

  export type KeuanganScalarWhereWithAggregatesInput = {
    AND?: KeuanganScalarWhereWithAggregatesInput | KeuanganScalarWhereWithAggregatesInput[]
    OR?: KeuanganScalarWhereWithAggregatesInput[]
    NOT?: KeuanganScalarWhereWithAggregatesInput | KeuanganScalarWhereWithAggregatesInput[]
    keuangan_id?: IntWithAggregatesFilter<"Keuangan"> | number
    jenisTransaksi?: StringWithAggregatesFilter<"Keuangan"> | string
    keterangan?: StringWithAggregatesFilter<"Keuangan"> | string
    kategori?: StringWithAggregatesFilter<"Keuangan"> | string
    tanggal?: DateTimeWithAggregatesFilter<"Keuangan"> | Date | string
    jumlah?: DecimalWithAggregatesFilter<"Keuangan"> | Decimal | DecimalJsLike | number | string
    catatan?: StringWithAggregatesFilter<"Keuangan"> | string
  }

  export type BeritaWhereInput = {
    AND?: BeritaWhereInput | BeritaWhereInput[]
    OR?: BeritaWhereInput[]
    NOT?: BeritaWhereInput | BeritaWhereInput[]
    berita_id?: IntFilter<"Berita"> | number
    judul?: StringFilter<"Berita"> | string
    kategori?: StringFilter<"Berita"> | string
    photo?: BytesNullableFilter<"Berita"> | Uint8Array | null
    tanggal?: StringNullableFilter<"Berita"> | string | null
    kontent?: StringFilter<"Berita"> | string
    status?: StringFilter<"Berita"> | string
  }

  export type BeritaOrderByWithRelationInput = {
    berita_id?: SortOrder
    judul?: SortOrder
    kategori?: SortOrder
    photo?: SortOrderInput | SortOrder
    tanggal?: SortOrderInput | SortOrder
    kontent?: SortOrder
    status?: SortOrder
    _relevance?: BeritaOrderByRelevanceInput
  }

  export type BeritaWhereUniqueInput = Prisma.AtLeast<{
    berita_id?: number
    AND?: BeritaWhereInput | BeritaWhereInput[]
    OR?: BeritaWhereInput[]
    NOT?: BeritaWhereInput | BeritaWhereInput[]
    judul?: StringFilter<"Berita"> | string
    kategori?: StringFilter<"Berita"> | string
    photo?: BytesNullableFilter<"Berita"> | Uint8Array | null
    tanggal?: StringNullableFilter<"Berita"> | string | null
    kontent?: StringFilter<"Berita"> | string
    status?: StringFilter<"Berita"> | string
  }, "berita_id">

  export type BeritaOrderByWithAggregationInput = {
    berita_id?: SortOrder
    judul?: SortOrder
    kategori?: SortOrder
    photo?: SortOrderInput | SortOrder
    tanggal?: SortOrderInput | SortOrder
    kontent?: SortOrder
    status?: SortOrder
    _count?: BeritaCountOrderByAggregateInput
    _avg?: BeritaAvgOrderByAggregateInput
    _max?: BeritaMaxOrderByAggregateInput
    _min?: BeritaMinOrderByAggregateInput
    _sum?: BeritaSumOrderByAggregateInput
  }

  export type BeritaScalarWhereWithAggregatesInput = {
    AND?: BeritaScalarWhereWithAggregatesInput | BeritaScalarWhereWithAggregatesInput[]
    OR?: BeritaScalarWhereWithAggregatesInput[]
    NOT?: BeritaScalarWhereWithAggregatesInput | BeritaScalarWhereWithAggregatesInput[]
    berita_id?: IntWithAggregatesFilter<"Berita"> | number
    judul?: StringWithAggregatesFilter<"Berita"> | string
    kategori?: StringWithAggregatesFilter<"Berita"> | string
    photo?: BytesNullableWithAggregatesFilter<"Berita"> | Uint8Array | null
    tanggal?: StringNullableWithAggregatesFilter<"Berita"> | string | null
    kontent?: StringWithAggregatesFilter<"Berita"> | string
    status?: StringWithAggregatesFilter<"Berita"> | string
  }

  export type LaporanWhereInput = {
    AND?: LaporanWhereInput | LaporanWhereInput[]
    OR?: LaporanWhereInput[]
    NOT?: LaporanWhereInput | LaporanWhereInput[]
    laporan_id?: IntFilter<"Laporan"> | number
    nama?: StringFilter<"Laporan"> | string
    keluhan?: StringFilter<"Laporan"> | string
    deskripsi?: StringFilter<"Laporan"> | string
    photo?: BytesFilter<"Laporan"> | Uint8Array
    tanggal?: StringNullableFilter<"Laporan"> | string | null
    lokasi?: StringFilter<"Laporan"> | string
    vote?: IntNullableFilter<"Laporan"> | number | null
    status?: StringFilter<"Laporan"> | string
  }

  export type LaporanOrderByWithRelationInput = {
    laporan_id?: SortOrder
    nama?: SortOrder
    keluhan?: SortOrder
    deskripsi?: SortOrder
    photo?: SortOrder
    tanggal?: SortOrderInput | SortOrder
    lokasi?: SortOrder
    vote?: SortOrderInput | SortOrder
    status?: SortOrder
    _relevance?: LaporanOrderByRelevanceInput
  }

  export type LaporanWhereUniqueInput = Prisma.AtLeast<{
    laporan_id?: number
    AND?: LaporanWhereInput | LaporanWhereInput[]
    OR?: LaporanWhereInput[]
    NOT?: LaporanWhereInput | LaporanWhereInput[]
    nama?: StringFilter<"Laporan"> | string
    keluhan?: StringFilter<"Laporan"> | string
    deskripsi?: StringFilter<"Laporan"> | string
    photo?: BytesFilter<"Laporan"> | Uint8Array
    tanggal?: StringNullableFilter<"Laporan"> | string | null
    lokasi?: StringFilter<"Laporan"> | string
    vote?: IntNullableFilter<"Laporan"> | number | null
    status?: StringFilter<"Laporan"> | string
  }, "laporan_id">

  export type LaporanOrderByWithAggregationInput = {
    laporan_id?: SortOrder
    nama?: SortOrder
    keluhan?: SortOrder
    deskripsi?: SortOrder
    photo?: SortOrder
    tanggal?: SortOrderInput | SortOrder
    lokasi?: SortOrder
    vote?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: LaporanCountOrderByAggregateInput
    _avg?: LaporanAvgOrderByAggregateInput
    _max?: LaporanMaxOrderByAggregateInput
    _min?: LaporanMinOrderByAggregateInput
    _sum?: LaporanSumOrderByAggregateInput
  }

  export type LaporanScalarWhereWithAggregatesInput = {
    AND?: LaporanScalarWhereWithAggregatesInput | LaporanScalarWhereWithAggregatesInput[]
    OR?: LaporanScalarWhereWithAggregatesInput[]
    NOT?: LaporanScalarWhereWithAggregatesInput | LaporanScalarWhereWithAggregatesInput[]
    laporan_id?: IntWithAggregatesFilter<"Laporan"> | number
    nama?: StringWithAggregatesFilter<"Laporan"> | string
    keluhan?: StringWithAggregatesFilter<"Laporan"> | string
    deskripsi?: StringWithAggregatesFilter<"Laporan"> | string
    photo?: BytesWithAggregatesFilter<"Laporan"> | Uint8Array
    tanggal?: StringNullableWithAggregatesFilter<"Laporan"> | string | null
    lokasi?: StringWithAggregatesFilter<"Laporan"> | string
    vote?: IntNullableWithAggregatesFilter<"Laporan"> | number | null
    status?: StringWithAggregatesFilter<"Laporan"> | string
  }

  export type SuratWhereInput = {
    AND?: SuratWhereInput | SuratWhereInput[]
    OR?: SuratWhereInput[]
    NOT?: SuratWhereInput | SuratWhereInput[]
    surat_id?: IntFilter<"Surat"> | number
    nama?: StringFilter<"Surat"> | string
    nik?: StringFilter<"Surat"> | string
    tempat_lahir?: StringFilter<"Surat"> | string
    tanggal_lahir?: DateTimeFilter<"Surat"> | Date | string
    jenis_kelamin?: StringFilter<"Surat"> | string
    agama?: StringFilter<"Surat"> | string
    alamat?: StringFilter<"Surat"> | string
    jenis_surat?: StringFilter<"Surat"> | string
    tujuan_surat?: StringFilter<"Surat"> | string
    photo_ktp?: BytesNullableFilter<"Surat"> | Uint8Array | null
    photo_kk?: BytesNullableFilter<"Surat"> | Uint8Array | null
    foto_usaha?: BytesNullableFilter<"Surat"> | Uint8Array | null
    waktu_kematian?: StringNullableFilter<"Surat"> | string | null
    gaji_ortu?: BytesNullableFilter<"Surat"> | Uint8Array | null
    tanggal?: DateTimeFilter<"Surat"> | Date | string
  }

  export type SuratOrderByWithRelationInput = {
    surat_id?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    tempat_lahir?: SortOrder
    tanggal_lahir?: SortOrder
    jenis_kelamin?: SortOrder
    agama?: SortOrder
    alamat?: SortOrder
    jenis_surat?: SortOrder
    tujuan_surat?: SortOrder
    photo_ktp?: SortOrderInput | SortOrder
    photo_kk?: SortOrderInput | SortOrder
    foto_usaha?: SortOrderInput | SortOrder
    waktu_kematian?: SortOrderInput | SortOrder
    gaji_ortu?: SortOrderInput | SortOrder
    tanggal?: SortOrder
    _relevance?: SuratOrderByRelevanceInput
  }

  export type SuratWhereUniqueInput = Prisma.AtLeast<{
    surat_id?: number
    AND?: SuratWhereInput | SuratWhereInput[]
    OR?: SuratWhereInput[]
    NOT?: SuratWhereInput | SuratWhereInput[]
    nama?: StringFilter<"Surat"> | string
    nik?: StringFilter<"Surat"> | string
    tempat_lahir?: StringFilter<"Surat"> | string
    tanggal_lahir?: DateTimeFilter<"Surat"> | Date | string
    jenis_kelamin?: StringFilter<"Surat"> | string
    agama?: StringFilter<"Surat"> | string
    alamat?: StringFilter<"Surat"> | string
    jenis_surat?: StringFilter<"Surat"> | string
    tujuan_surat?: StringFilter<"Surat"> | string
    photo_ktp?: BytesNullableFilter<"Surat"> | Uint8Array | null
    photo_kk?: BytesNullableFilter<"Surat"> | Uint8Array | null
    foto_usaha?: BytesNullableFilter<"Surat"> | Uint8Array | null
    waktu_kematian?: StringNullableFilter<"Surat"> | string | null
    gaji_ortu?: BytesNullableFilter<"Surat"> | Uint8Array | null
    tanggal?: DateTimeFilter<"Surat"> | Date | string
  }, "surat_id">

  export type SuratOrderByWithAggregationInput = {
    surat_id?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    tempat_lahir?: SortOrder
    tanggal_lahir?: SortOrder
    jenis_kelamin?: SortOrder
    agama?: SortOrder
    alamat?: SortOrder
    jenis_surat?: SortOrder
    tujuan_surat?: SortOrder
    photo_ktp?: SortOrderInput | SortOrder
    photo_kk?: SortOrderInput | SortOrder
    foto_usaha?: SortOrderInput | SortOrder
    waktu_kematian?: SortOrderInput | SortOrder
    gaji_ortu?: SortOrderInput | SortOrder
    tanggal?: SortOrder
    _count?: SuratCountOrderByAggregateInput
    _avg?: SuratAvgOrderByAggregateInput
    _max?: SuratMaxOrderByAggregateInput
    _min?: SuratMinOrderByAggregateInput
    _sum?: SuratSumOrderByAggregateInput
  }

  export type SuratScalarWhereWithAggregatesInput = {
    AND?: SuratScalarWhereWithAggregatesInput | SuratScalarWhereWithAggregatesInput[]
    OR?: SuratScalarWhereWithAggregatesInput[]
    NOT?: SuratScalarWhereWithAggregatesInput | SuratScalarWhereWithAggregatesInput[]
    surat_id?: IntWithAggregatesFilter<"Surat"> | number
    nama?: StringWithAggregatesFilter<"Surat"> | string
    nik?: StringWithAggregatesFilter<"Surat"> | string
    tempat_lahir?: StringWithAggregatesFilter<"Surat"> | string
    tanggal_lahir?: DateTimeWithAggregatesFilter<"Surat"> | Date | string
    jenis_kelamin?: StringWithAggregatesFilter<"Surat"> | string
    agama?: StringWithAggregatesFilter<"Surat"> | string
    alamat?: StringWithAggregatesFilter<"Surat"> | string
    jenis_surat?: StringWithAggregatesFilter<"Surat"> | string
    tujuan_surat?: StringWithAggregatesFilter<"Surat"> | string
    photo_ktp?: BytesNullableWithAggregatesFilter<"Surat"> | Uint8Array | null
    photo_kk?: BytesNullableWithAggregatesFilter<"Surat"> | Uint8Array | null
    foto_usaha?: BytesNullableWithAggregatesFilter<"Surat"> | Uint8Array | null
    waktu_kematian?: StringNullableWithAggregatesFilter<"Surat"> | string | null
    gaji_ortu?: BytesNullableWithAggregatesFilter<"Surat"> | Uint8Array | null
    tanggal?: DateTimeWithAggregatesFilter<"Surat"> | Date | string
  }

  export type UserCreateInput = {
    NIK: string
    nama: string
    no_hp: string
    jenis_kel: string
    alamat: string
    agama: string
    username: string
    password: string
    photo?: Uint8Array | null
    role?: string
  }

  export type UserUncheckedCreateInput = {
    user_id?: number
    NIK: string
    nama: string
    no_hp: string
    jenis_kel: string
    alamat: string
    agama: string
    username: string
    password: string
    photo?: Uint8Array | null
    role?: string
  }

  export type UserUpdateInput = {
    NIK?: StringFieldUpdateOperationsInput | string
    nama?: StringFieldUpdateOperationsInput | string
    no_hp?: StringFieldUpdateOperationsInput | string
    jenis_kel?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    agama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    NIK?: StringFieldUpdateOperationsInput | string
    nama?: StringFieldUpdateOperationsInput | string
    no_hp?: StringFieldUpdateOperationsInput | string
    jenis_kel?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    agama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    user_id?: number
    NIK: string
    nama: string
    no_hp: string
    jenis_kel: string
    alamat: string
    agama: string
    username: string
    password: string
    photo?: Uint8Array | null
    role?: string
  }

  export type UserUpdateManyMutationInput = {
    NIK?: StringFieldUpdateOperationsInput | string
    nama?: StringFieldUpdateOperationsInput | string
    no_hp?: StringFieldUpdateOperationsInput | string
    jenis_kel?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    agama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    NIK?: StringFieldUpdateOperationsInput | string
    nama?: StringFieldUpdateOperationsInput | string
    no_hp?: StringFieldUpdateOperationsInput | string
    jenis_kel?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    agama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type KeuanganCreateInput = {
    jenisTransaksi: string
    keterangan: string
    kategori: string
    tanggal: Date | string
    jumlah: Decimal | DecimalJsLike | number | string
    catatan: string
  }

  export type KeuanganUncheckedCreateInput = {
    keuangan_id?: number
    jenisTransaksi: string
    keterangan: string
    kategori: string
    tanggal: Date | string
    jumlah: Decimal | DecimalJsLike | number | string
    catatan: string
  }

  export type KeuanganUpdateInput = {
    jenisTransaksi?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    kategori?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    jumlah?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    catatan?: StringFieldUpdateOperationsInput | string
  }

  export type KeuanganUncheckedUpdateInput = {
    keuangan_id?: IntFieldUpdateOperationsInput | number
    jenisTransaksi?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    kategori?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    jumlah?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    catatan?: StringFieldUpdateOperationsInput | string
  }

  export type KeuanganCreateManyInput = {
    keuangan_id?: number
    jenisTransaksi: string
    keterangan: string
    kategori: string
    tanggal: Date | string
    jumlah: Decimal | DecimalJsLike | number | string
    catatan: string
  }

  export type KeuanganUpdateManyMutationInput = {
    jenisTransaksi?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    kategori?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    jumlah?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    catatan?: StringFieldUpdateOperationsInput | string
  }

  export type KeuanganUncheckedUpdateManyInput = {
    keuangan_id?: IntFieldUpdateOperationsInput | number
    jenisTransaksi?: StringFieldUpdateOperationsInput | string
    keterangan?: StringFieldUpdateOperationsInput | string
    kategori?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    jumlah?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    catatan?: StringFieldUpdateOperationsInput | string
  }

  export type BeritaCreateInput = {
    judul: string
    kategori: string
    photo?: Uint8Array | null
    tanggal?: string | null
    kontent: string
    status: string
  }

  export type BeritaUncheckedCreateInput = {
    berita_id?: number
    judul: string
    kategori: string
    photo?: Uint8Array | null
    tanggal?: string | null
    kontent: string
    status: string
  }

  export type BeritaUpdateInput = {
    judul?: StringFieldUpdateOperationsInput | string
    kategori?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    tanggal?: NullableStringFieldUpdateOperationsInput | string | null
    kontent?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BeritaUncheckedUpdateInput = {
    berita_id?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    kategori?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    tanggal?: NullableStringFieldUpdateOperationsInput | string | null
    kontent?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BeritaCreateManyInput = {
    berita_id?: number
    judul: string
    kategori: string
    photo?: Uint8Array | null
    tanggal?: string | null
    kontent: string
    status: string
  }

  export type BeritaUpdateManyMutationInput = {
    judul?: StringFieldUpdateOperationsInput | string
    kategori?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    tanggal?: NullableStringFieldUpdateOperationsInput | string | null
    kontent?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BeritaUncheckedUpdateManyInput = {
    berita_id?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    kategori?: StringFieldUpdateOperationsInput | string
    photo?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    tanggal?: NullableStringFieldUpdateOperationsInput | string | null
    kontent?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type LaporanCreateInput = {
    nama: string
    keluhan: string
    deskripsi: string
    photo: Uint8Array
    tanggal?: string | null
    lokasi: string
    vote?: number | null
    status: string
  }

  export type LaporanUncheckedCreateInput = {
    laporan_id?: number
    nama: string
    keluhan: string
    deskripsi: string
    photo: Uint8Array
    tanggal?: string | null
    lokasi: string
    vote?: number | null
    status: string
  }

  export type LaporanUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    keluhan?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    tanggal?: NullableStringFieldUpdateOperationsInput | string | null
    lokasi?: StringFieldUpdateOperationsInput | string
    vote?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type LaporanUncheckedUpdateInput = {
    laporan_id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    keluhan?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    tanggal?: NullableStringFieldUpdateOperationsInput | string | null
    lokasi?: StringFieldUpdateOperationsInput | string
    vote?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type LaporanCreateManyInput = {
    laporan_id?: number
    nama: string
    keluhan: string
    deskripsi: string
    photo: Uint8Array
    tanggal?: string | null
    lokasi: string
    vote?: number | null
    status: string
  }

  export type LaporanUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    keluhan?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    tanggal?: NullableStringFieldUpdateOperationsInput | string | null
    lokasi?: StringFieldUpdateOperationsInput | string
    vote?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type LaporanUncheckedUpdateManyInput = {
    laporan_id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    keluhan?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    photo?: BytesFieldUpdateOperationsInput | Uint8Array
    tanggal?: NullableStringFieldUpdateOperationsInput | string | null
    lokasi?: StringFieldUpdateOperationsInput | string
    vote?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type SuratCreateInput = {
    nama: string
    nik: string
    tempat_lahir: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    agama: string
    alamat: string
    jenis_surat: string
    tujuan_surat: string
    photo_ktp?: Uint8Array | null
    photo_kk?: Uint8Array | null
    foto_usaha?: Uint8Array | null
    waktu_kematian?: string | null
    gaji_ortu?: Uint8Array | null
    tanggal?: Date | string
  }

  export type SuratUncheckedCreateInput = {
    surat_id?: number
    nama: string
    nik: string
    tempat_lahir: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    agama: string
    alamat: string
    jenis_surat: string
    tujuan_surat: string
    photo_ktp?: Uint8Array | null
    photo_kk?: Uint8Array | null
    foto_usaha?: Uint8Array | null
    waktu_kematian?: string | null
    gaji_ortu?: Uint8Array | null
    tanggal?: Date | string
  }

  export type SuratUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    agama?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    jenis_surat?: StringFieldUpdateOperationsInput | string
    tujuan_surat?: StringFieldUpdateOperationsInput | string
    photo_ktp?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    photo_kk?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    foto_usaha?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    waktu_kematian?: NullableStringFieldUpdateOperationsInput | string | null
    gaji_ortu?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SuratUncheckedUpdateInput = {
    surat_id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    agama?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    jenis_surat?: StringFieldUpdateOperationsInput | string
    tujuan_surat?: StringFieldUpdateOperationsInput | string
    photo_ktp?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    photo_kk?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    foto_usaha?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    waktu_kematian?: NullableStringFieldUpdateOperationsInput | string | null
    gaji_ortu?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SuratCreateManyInput = {
    surat_id?: number
    nama: string
    nik: string
    tempat_lahir: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    agama: string
    alamat: string
    jenis_surat: string
    tujuan_surat: string
    photo_ktp?: Uint8Array | null
    photo_kk?: Uint8Array | null
    foto_usaha?: Uint8Array | null
    waktu_kematian?: string | null
    gaji_ortu?: Uint8Array | null
    tanggal?: Date | string
  }

  export type SuratUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    agama?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    jenis_surat?: StringFieldUpdateOperationsInput | string
    tujuan_surat?: StringFieldUpdateOperationsInput | string
    photo_ktp?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    photo_kk?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    foto_usaha?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    waktu_kematian?: NullableStringFieldUpdateOperationsInput | string | null
    gaji_ortu?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SuratUncheckedUpdateManyInput = {
    surat_id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    tempat_lahir?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    agama?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    jenis_surat?: StringFieldUpdateOperationsInput | string
    tujuan_surat?: StringFieldUpdateOperationsInput | string
    photo_ktp?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    photo_kk?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    foto_usaha?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    waktu_kematian?: NullableStringFieldUpdateOperationsInput | string | null
    gaji_ortu?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    NIK?: SortOrder
    nama?: SortOrder
    no_hp?: SortOrder
    jenis_kel?: SortOrder
    alamat?: SortOrder
    agama?: SortOrder
    username?: SortOrder
    password?: SortOrder
    photo?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    NIK?: SortOrder
    nama?: SortOrder
    no_hp?: SortOrder
    jenis_kel?: SortOrder
    alamat?: SortOrder
    agama?: SortOrder
    username?: SortOrder
    password?: SortOrder
    photo?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    NIK?: SortOrder
    nama?: SortOrder
    no_hp?: SortOrder
    jenis_kel?: SortOrder
    alamat?: SortOrder
    agama?: SortOrder
    username?: SortOrder
    password?: SortOrder
    photo?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type KeuanganOrderByRelevanceInput = {
    fields: KeuanganOrderByRelevanceFieldEnum | KeuanganOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type KeuanganCountOrderByAggregateInput = {
    keuangan_id?: SortOrder
    jenisTransaksi?: SortOrder
    keterangan?: SortOrder
    kategori?: SortOrder
    tanggal?: SortOrder
    jumlah?: SortOrder
    catatan?: SortOrder
  }

  export type KeuanganAvgOrderByAggregateInput = {
    keuangan_id?: SortOrder
    jumlah?: SortOrder
  }

  export type KeuanganMaxOrderByAggregateInput = {
    keuangan_id?: SortOrder
    jenisTransaksi?: SortOrder
    keterangan?: SortOrder
    kategori?: SortOrder
    tanggal?: SortOrder
    jumlah?: SortOrder
    catatan?: SortOrder
  }

  export type KeuanganMinOrderByAggregateInput = {
    keuangan_id?: SortOrder
    jenisTransaksi?: SortOrder
    keterangan?: SortOrder
    kategori?: SortOrder
    tanggal?: SortOrder
    jumlah?: SortOrder
    catatan?: SortOrder
  }

  export type KeuanganSumOrderByAggregateInput = {
    keuangan_id?: SortOrder
    jumlah?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BeritaOrderByRelevanceInput = {
    fields: BeritaOrderByRelevanceFieldEnum | BeritaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BeritaCountOrderByAggregateInput = {
    berita_id?: SortOrder
    judul?: SortOrder
    kategori?: SortOrder
    photo?: SortOrder
    tanggal?: SortOrder
    kontent?: SortOrder
    status?: SortOrder
  }

  export type BeritaAvgOrderByAggregateInput = {
    berita_id?: SortOrder
  }

  export type BeritaMaxOrderByAggregateInput = {
    berita_id?: SortOrder
    judul?: SortOrder
    kategori?: SortOrder
    photo?: SortOrder
    tanggal?: SortOrder
    kontent?: SortOrder
    status?: SortOrder
  }

  export type BeritaMinOrderByAggregateInput = {
    berita_id?: SortOrder
    judul?: SortOrder
    kategori?: SortOrder
    photo?: SortOrder
    tanggal?: SortOrder
    kontent?: SortOrder
    status?: SortOrder
  }

  export type BeritaSumOrderByAggregateInput = {
    berita_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BytesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[]
    notIn?: Uint8Array[]
    not?: NestedBytesFilter<$PrismaModel> | Uint8Array
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type LaporanOrderByRelevanceInput = {
    fields: LaporanOrderByRelevanceFieldEnum | LaporanOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LaporanCountOrderByAggregateInput = {
    laporan_id?: SortOrder
    nama?: SortOrder
    keluhan?: SortOrder
    deskripsi?: SortOrder
    photo?: SortOrder
    tanggal?: SortOrder
    lokasi?: SortOrder
    vote?: SortOrder
    status?: SortOrder
  }

  export type LaporanAvgOrderByAggregateInput = {
    laporan_id?: SortOrder
    vote?: SortOrder
  }

  export type LaporanMaxOrderByAggregateInput = {
    laporan_id?: SortOrder
    nama?: SortOrder
    keluhan?: SortOrder
    deskripsi?: SortOrder
    photo?: SortOrder
    tanggal?: SortOrder
    lokasi?: SortOrder
    vote?: SortOrder
    status?: SortOrder
  }

  export type LaporanMinOrderByAggregateInput = {
    laporan_id?: SortOrder
    nama?: SortOrder
    keluhan?: SortOrder
    deskripsi?: SortOrder
    photo?: SortOrder
    tanggal?: SortOrder
    lokasi?: SortOrder
    vote?: SortOrder
    status?: SortOrder
  }

  export type LaporanSumOrderByAggregateInput = {
    laporan_id?: SortOrder
    vote?: SortOrder
  }

  export type BytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[]
    notIn?: Uint8Array[]
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Uint8Array
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SuratOrderByRelevanceInput = {
    fields: SuratOrderByRelevanceFieldEnum | SuratOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SuratCountOrderByAggregateInput = {
    surat_id?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    tempat_lahir?: SortOrder
    tanggal_lahir?: SortOrder
    jenis_kelamin?: SortOrder
    agama?: SortOrder
    alamat?: SortOrder
    jenis_surat?: SortOrder
    tujuan_surat?: SortOrder
    photo_ktp?: SortOrder
    photo_kk?: SortOrder
    foto_usaha?: SortOrder
    waktu_kematian?: SortOrder
    gaji_ortu?: SortOrder
    tanggal?: SortOrder
  }

  export type SuratAvgOrderByAggregateInput = {
    surat_id?: SortOrder
  }

  export type SuratMaxOrderByAggregateInput = {
    surat_id?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    tempat_lahir?: SortOrder
    tanggal_lahir?: SortOrder
    jenis_kelamin?: SortOrder
    agama?: SortOrder
    alamat?: SortOrder
    jenis_surat?: SortOrder
    tujuan_surat?: SortOrder
    photo_ktp?: SortOrder
    photo_kk?: SortOrder
    foto_usaha?: SortOrder
    waktu_kematian?: SortOrder
    gaji_ortu?: SortOrder
    tanggal?: SortOrder
  }

  export type SuratMinOrderByAggregateInput = {
    surat_id?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    tempat_lahir?: SortOrder
    tanggal_lahir?: SortOrder
    jenis_kelamin?: SortOrder
    agama?: SortOrder
    alamat?: SortOrder
    jenis_surat?: SortOrder
    tujuan_surat?: SortOrder
    photo_ktp?: SortOrder
    photo_kk?: SortOrder
    foto_usaha?: SortOrder
    waktu_kematian?: SortOrder
    gaji_ortu?: SortOrder
    tanggal?: SortOrder
  }

  export type SuratSumOrderByAggregateInput = {
    surat_id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Uint8Array | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Uint8Array
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBytesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[]
    notIn?: Uint8Array[]
    not?: NestedBytesFilter<$PrismaModel> | Uint8Array
  }

  export type NestedBytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[]
    notIn?: Uint8Array[]
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Uint8Array
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}